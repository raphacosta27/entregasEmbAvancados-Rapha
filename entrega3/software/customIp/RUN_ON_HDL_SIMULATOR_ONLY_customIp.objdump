
RUN_ON_HDL_SIMULATOR_ONLY_customIp.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_customIp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040230

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x00001dc4 memsz 0x00001dc4 flags r-x
    LOAD off    0x00003000 vaddr 0x00080000 paddr 0x00041de4 align 2**12
         filesz 0x0000167c memsz 0x0000179c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001bb4  00040230  00040230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  00080000  00041de4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  00080024  00041e08  00003024  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0008167c  00043460  0000467c  2**2
                  ALLOC, SMALL_DATA
  6 .rom          00000000  00043460  00043460  0000467c  2**0
                  CONTENTS
  7 .ram          00000000  0008179c  0008179c  0000467c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000004d8  00000000  00000000  000046a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000061c1  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022c9  00000000  00000000  0000ad39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000021cf  00000000  00000000  0000d002  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000008c8  00000000  00000000  0000f1d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001a0e  00000000  00000000  0000fa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000696  00000000  00000000  000114aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00011b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000134ae  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000134b1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000134bd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000134be  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000134bf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000134c3  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000134c7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000134cb  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000021  00000000  00000000  000134d4  2**0
                  CONTENTS, READONLY
 26 .jdi          0000405b  00000000  00000000  000134f5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00045396  00000000  00000000  00017550  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040230 l    d  .text	00000000 .text
00080000 l    d  .rodata	00000000 .rodata
00080024 l    d  .rwdata	00000000 .rwdata
0008167c l    d  .bss	00000000 .bss
00043460 l    d  .rom	00000000 .rom
0008179c l    d  .ram	00000000 .ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../customIp_bsp//obj/HAL/src/crt0.o
00040248 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
000402a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000403ec l     F .text	00000038 alt_dev_reg
00080024 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000406d0 l     F .text	0000020c altera_avalon_jtag_uart_irq
000408dc l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0004105c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000411a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000411d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0008122c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00081694 g     O .bss	00000004 alt_instruction_exception_handler
0004038c g     F .text	00000060 alt_main
0008169c g     O .bss	00000100 alt_irq
00041e08 g       *ABS*	00000000 __flash_rwdata_start
0004189c g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000000c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
00081698 g     O .bss	00000004 errno
00040000 g       *ABS*	00000000 __alt_mem_rom
00081680 g     O .bss	00000004 alt_argv
00089650 g       *ABS*	00000000 _gp
000810ac g     O .rwdata	00000180 alt_fd_list
000419a8 g     F .text	00000148 memcpy
00041de4 g       *ABS*	00000000 __DTOR_END__
000418c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00040adc g     F .text	0000021c altera_avalon_jtag_uart_read
00080000 g       *ABS*	00000000 __alt_mem_ram
00081660 g     O .rwdata	00000004 alt_max_fd
00081674 g     O .rwdata	00000004 _global_impure_ptr
0008179c g       *ABS*	00000000 __bss_end
00041584 g     F .text	000000f0 alt_iic_isr_register
00041794 g     F .text	00000108 alt_tick
00041538 g     F .text	0000004c alt_ic_irq_enabled
000416f8 g     F .text	0000009c alt_alarm_stop
00081688 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
00081084 g     O .rwdata	00000028 alt_dev_null
00041184 g     F .text	00000020 alt_dcache_flush_all
0008167c g       *ABS*	00000000 __ram_rwdata_end
00081658 g     O .rwdata	00000008 alt_dev_list
00080024 g       *ABS*	00000000 __ram_rodata_end
0008179c g       *ABS*	00000000 end
00040608 g     F .text	000000c8 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00041de4 g       *ABS*	00000000 __CTOR_LIST__
000c0000 g       *ABS*	00000000 __alt_stack_pointer
00040cf8 g     F .text	00000224 altera_avalon_jtag_uart_write
00041c08 g     F .text	00000180 __call_exitprocs
00040230 g     F .text	0000001c _start
0008168c g     O .bss	00000004 _alt_tick_rate
00081690 g     O .bss	00000004 _alt_nticks
0004045c g     F .text	00000048 alt_sys_init
00041af0 g     F .text	00000118 __register_exitproc
00040984 g     F .text	00000068 altera_avalon_jtag_uart_close
00041d88 g     F .text	00000028 .hidden __mulsi3
00080024 g       *ABS*	00000000 __ram_rwdata_start
00080000 g       *ABS*	00000000 __ram_rodata_start
000404a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00040564 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0008179c g       *ABS*	00000000 __alt_stack_base
000405b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041220 g     F .text	000000a4 alt_dev_llist_insert
0008167c g       *ABS*	00000000 __bss_start
0004024c g     F .text	00000054 main
00081684 g     O .bss	00000004 alt_envp
00040504 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00081664 g     O .rwdata	00000004 alt_errno
00041de4 g       *ABS*	00000000 __CTOR_END__
00041de4 g       *ABS*	00000000 __flash_rodata_start
00041de4 g       *ABS*	00000000 __DTOR_LIST__
00040424 g     F .text	00000038 alt_irq_init
00041674 g     F .text	00000084 alt_release_fd
0004195c g     F .text	00000014 atexit
00081678 g     O .rwdata	00000004 _impure_ptr
0008167c g     O .bss	00000004 alt_argc
00041324 g     F .text	00000060 _do_dtors
00040020 g       .exceptions	00000000 alt_irq_entry
00081650 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
000413a4 g     F .text	00000050 alt_ic_isr_register
0008167c g       *ABS*	00000000 _edata
0008179c g       *ABS*	00000000 _end
00040230 g       *ABS*	00000000 __ram_exceptions_end
000409ec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00041494 g     F .text	000000a4 alt_ic_irq_disable
00041970 g     F .text	00000038 exit
000c0000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
00041db0 g     F .text	00000034 _exit
00040f1c g     F .text	00000140 alt_alarm_start
00041384 g     F .text	00000020 alt_icache_flush_all
00081668 g     O .rwdata	00000004 alt_priority_mask
000413f4 g     F .text	000000a0 alt_ic_irq_enable
0008166c g     O .rwdata	00000008 alt_alarm_list
000412c4 g     F .text	00000060 _do_ctors
000410ac g     F .text	000000d8 close
00040308 g     F .text	00000084 alt_load



Disassembly of section .entry:

00040000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40000:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40004:	08408c14 	ori	at,at,560
    jmp r1
   40008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800234 	movhi	r2,8
   40140:	1085a704 	addi	r2,r2,5788
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800234 	movhi	r2,8
   40158:	1085a704 	addi	r2,r2,5788
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   401e4:	00bfffc4 	movi	r2,-1
   401e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   401ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   401f0:	d0a01117 	ldw	r2,-32700(gp)
   401f4:	10000726 	beq	r2,zero,40214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   401f8:	d0a01117 	ldw	r2,-32700(gp)
   401fc:	e0fffd17 	ldw	r3,-12(fp)
   40200:	e1bffe17 	ldw	r6,-8(fp)
   40204:	e17fff17 	ldw	r5,-4(fp)
   40208:	1809883a 	mov	r4,r3
   4020c:	103ee83a 	callr	r2
   40210:	00000206 	br	4021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   40218:	0005883a 	mov	r2,zero
}
   4021c:	e037883a 	mov	sp,fp
   40220:	dfc00117 	ldw	ra,4(sp)
   40224:	df000017 	ldw	fp,0(sp)
   40228:	dec00204 	addi	sp,sp,8
   4022c:	f800283a 	ret

Disassembly of section .text:

00040230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40230:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   40234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   40238:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   4023c:	d6a59414 	ori	gp,gp,38480
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40240:	00403080 	call	40308 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40244:	004038c0 	call	4038c <alt_main>

00040248 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   40248:	003fff06 	br	40248 <alt_after_alt_main>

0004024c <main>:
#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
   4024c:	defffd04 	addi	sp,sp,-12
   40250:	df000215 	stw	fp,8(sp)
   40254:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   40258:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   4025c:	00800334 	movhi	r2,12
   40260:	10841004 	addi	r2,r2,4160
   40264:	e0bfff15 	stw	r2,-4(fp)
#ifndef SIM
  printf("Embarcados++ \n");
#endif

  while(1){
	  if (led < 4){
   40268:	e0bffe17 	ldw	r2,-8(fp)
   4026c:	10800128 	cmpgeui	r2,r2,4
   40270:	1000091e 	bne	r2,zero,40298 <main+0x4c>
		  *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   40274:	e0bfff17 	ldw	r2,-4(fp)
   40278:	10c00104 	addi	r3,r2,4
   4027c:	e0bffe17 	ldw	r2,-8(fp)
   40280:	11000044 	addi	r4,r2,1
   40284:	e13ffe15 	stw	r4,-8(fp)
   40288:	01000044 	movi	r4,1
   4028c:	2084983a 	sll	r2,r4,r2
   40290:	18800015 	stw	r2,0(r3)
   40294:	003ff406 	br	40268 <main+0x1c>
#ifndef SIM
          usleep(500000); // remover durante a simulação
#endif
	  }
	  else{
		  led = 0;
   40298:	e03ffe15 	stw	zero,-8(fp)
	  }
  };
   4029c:	003ff206 	br	40268 <main+0x1c>

000402a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   402a0:	defffc04 	addi	sp,sp,-16
   402a4:	df000315 	stw	fp,12(sp)
   402a8:	df000304 	addi	fp,sp,12
   402ac:	e13ffd15 	stw	r4,-12(fp)
   402b0:	e17ffe15 	stw	r5,-8(fp)
   402b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   402b8:	e0fffe17 	ldw	r3,-8(fp)
   402bc:	e0bffd17 	ldw	r2,-12(fp)
   402c0:	18800c26 	beq	r3,r2,402f4 <alt_load_section+0x54>
  {
    while( to != end )
   402c4:	00000806 	br	402e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   402c8:	e0bffe17 	ldw	r2,-8(fp)
   402cc:	10c00104 	addi	r3,r2,4
   402d0:	e0fffe15 	stw	r3,-8(fp)
   402d4:	e0fffd17 	ldw	r3,-12(fp)
   402d8:	19000104 	addi	r4,r3,4
   402dc:	e13ffd15 	stw	r4,-12(fp)
   402e0:	18c00017 	ldw	r3,0(r3)
   402e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   402e8:	e0fffe17 	ldw	r3,-8(fp)
   402ec:	e0bfff17 	ldw	r2,-4(fp)
   402f0:	18bff51e 	bne	r3,r2,402c8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   402f4:	0001883a 	nop
   402f8:	e037883a 	mov	sp,fp
   402fc:	df000017 	ldw	fp,0(sp)
   40300:	dec00104 	addi	sp,sp,4
   40304:	f800283a 	ret

00040308 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   40308:	defffe04 	addi	sp,sp,-8
   4030c:	dfc00115 	stw	ra,4(sp)
   40310:	df000015 	stw	fp,0(sp)
   40314:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   40318:	01800234 	movhi	r6,8
   4031c:	31859f04 	addi	r6,r6,5756
   40320:	01400234 	movhi	r5,8
   40324:	29400904 	addi	r5,r5,36
   40328:	01000134 	movhi	r4,4
   4032c:	21078204 	addi	r4,r4,7688
   40330:	00402a00 	call	402a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   40334:	01800134 	movhi	r6,4
   40338:	31808c04 	addi	r6,r6,560
   4033c:	01400134 	movhi	r5,4
   40340:	29400804 	addi	r5,r5,32
   40344:	01000134 	movhi	r4,4
   40348:	21000804 	addi	r4,r4,32
   4034c:	00402a00 	call	402a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   40350:	01800234 	movhi	r6,8
   40354:	31800904 	addi	r6,r6,36
   40358:	01400234 	movhi	r5,8
   4035c:	29400004 	addi	r5,r5,0
   40360:	01000134 	movhi	r4,4
   40364:	21077904 	addi	r4,r4,7652
   40368:	00402a00 	call	402a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4036c:	00411840 	call	41184 <alt_dcache_flush_all>
  alt_icache_flush_all();
   40370:	00413840 	call	41384 <alt_icache_flush_all>
}
   40374:	0001883a 	nop
   40378:	e037883a 	mov	sp,fp
   4037c:	dfc00117 	ldw	ra,4(sp)
   40380:	df000017 	ldw	fp,0(sp)
   40384:	dec00204 	addi	sp,sp,8
   40388:	f800283a 	ret

0004038c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4038c:	defffd04 	addi	sp,sp,-12
   40390:	dfc00215 	stw	ra,8(sp)
   40394:	df000115 	stw	fp,4(sp)
   40398:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4039c:	0009883a 	mov	r4,zero
   403a0:	00404240 	call	40424 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   403a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   403a8:	004045c0 	call	4045c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   403ac:	00412c40 	call	412c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   403b0:	01000134 	movhi	r4,4
   403b4:	2104c904 	addi	r4,r4,4900
   403b8:	004195c0 	call	4195c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   403bc:	d0a00b17 	ldw	r2,-32724(gp)
   403c0:	d0e00c17 	ldw	r3,-32720(gp)
   403c4:	d1200d17 	ldw	r4,-32716(gp)
   403c8:	200d883a 	mov	r6,r4
   403cc:	180b883a 	mov	r5,r3
   403d0:	1009883a 	mov	r4,r2
   403d4:	004024c0 	call	4024c <main>
   403d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   403dc:	01000044 	movi	r4,1
   403e0:	00410ac0 	call	410ac <close>
  exit (result);
   403e4:	e13fff17 	ldw	r4,-4(fp)
   403e8:	00419700 	call	41970 <exit>

000403ec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   403ec:	defffd04 	addi	sp,sp,-12
   403f0:	dfc00215 	stw	ra,8(sp)
   403f4:	df000115 	stw	fp,4(sp)
   403f8:	df000104 	addi	fp,sp,4
   403fc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   40400:	01400234 	movhi	r5,8
   40404:	29459604 	addi	r5,r5,5720
   40408:	e13fff17 	ldw	r4,-4(fp)
   4040c:	00412200 	call	41220 <alt_dev_llist_insert>
}
   40410:	e037883a 	mov	sp,fp
   40414:	dfc00117 	ldw	ra,4(sp)
   40418:	df000017 	ldw	fp,0(sp)
   4041c:	dec00204 	addi	sp,sp,8
   40420:	f800283a 	ret

00040424 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   40424:	defffd04 	addi	sp,sp,-12
   40428:	dfc00215 	stw	ra,8(sp)
   4042c:	df000115 	stw	fp,4(sp)
   40430:	df000104 	addi	fp,sp,4
   40434:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   40438:	004189c0 	call	4189c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4043c:	00800044 	movi	r2,1
   40440:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   40444:	0001883a 	nop
   40448:	e037883a 	mov	sp,fp
   4044c:	dfc00117 	ldw	ra,4(sp)
   40450:	df000017 	ldw	fp,0(sp)
   40454:	dec00204 	addi	sp,sp,8
   40458:	f800283a 	ret

0004045c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4045c:	defffe04 	addi	sp,sp,-8
   40460:	dfc00115 	stw	ra,4(sp)
   40464:	df000015 	stw	fp,0(sp)
   40468:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   4046c:	01800044 	movi	r6,1
   40470:	000b883a 	mov	r5,zero
   40474:	01000234 	movhi	r4,8
   40478:	21001304 	addi	r4,r4,76
   4047c:	00406080 	call	40608 <altera_avalon_jtag_uart_init>
   40480:	01000234 	movhi	r4,8
   40484:	21000904 	addi	r4,r4,36
   40488:	00403ec0 	call	403ec <alt_dev_reg>
}
   4048c:	0001883a 	nop
   40490:	e037883a 	mov	sp,fp
   40494:	dfc00117 	ldw	ra,4(sp)
   40498:	df000017 	ldw	fp,0(sp)
   4049c:	dec00204 	addi	sp,sp,8
   404a0:	f800283a 	ret

000404a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   404a4:	defffa04 	addi	sp,sp,-24
   404a8:	dfc00515 	stw	ra,20(sp)
   404ac:	df000415 	stw	fp,16(sp)
   404b0:	df000404 	addi	fp,sp,16
   404b4:	e13ffd15 	stw	r4,-12(fp)
   404b8:	e17ffe15 	stw	r5,-8(fp)
   404bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   404c0:	e0bffd17 	ldw	r2,-12(fp)
   404c4:	10800017 	ldw	r2,0(r2)
   404c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   404cc:	e0bffc17 	ldw	r2,-16(fp)
   404d0:	10c00a04 	addi	r3,r2,40
   404d4:	e0bffd17 	ldw	r2,-12(fp)
   404d8:	10800217 	ldw	r2,8(r2)
   404dc:	100f883a 	mov	r7,r2
   404e0:	e1bfff17 	ldw	r6,-4(fp)
   404e4:	e17ffe17 	ldw	r5,-8(fp)
   404e8:	1809883a 	mov	r4,r3
   404ec:	0040adc0 	call	40adc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   404f0:	e037883a 	mov	sp,fp
   404f4:	dfc00117 	ldw	ra,4(sp)
   404f8:	df000017 	ldw	fp,0(sp)
   404fc:	dec00204 	addi	sp,sp,8
   40500:	f800283a 	ret

00040504 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   40504:	defffa04 	addi	sp,sp,-24
   40508:	dfc00515 	stw	ra,20(sp)
   4050c:	df000415 	stw	fp,16(sp)
   40510:	df000404 	addi	fp,sp,16
   40514:	e13ffd15 	stw	r4,-12(fp)
   40518:	e17ffe15 	stw	r5,-8(fp)
   4051c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40520:	e0bffd17 	ldw	r2,-12(fp)
   40524:	10800017 	ldw	r2,0(r2)
   40528:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4052c:	e0bffc17 	ldw	r2,-16(fp)
   40530:	10c00a04 	addi	r3,r2,40
   40534:	e0bffd17 	ldw	r2,-12(fp)
   40538:	10800217 	ldw	r2,8(r2)
   4053c:	100f883a 	mov	r7,r2
   40540:	e1bfff17 	ldw	r6,-4(fp)
   40544:	e17ffe17 	ldw	r5,-8(fp)
   40548:	1809883a 	mov	r4,r3
   4054c:	0040cf80 	call	40cf8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40550:	e037883a 	mov	sp,fp
   40554:	dfc00117 	ldw	ra,4(sp)
   40558:	df000017 	ldw	fp,0(sp)
   4055c:	dec00204 	addi	sp,sp,8
   40560:	f800283a 	ret

00040564 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   40564:	defffc04 	addi	sp,sp,-16
   40568:	dfc00315 	stw	ra,12(sp)
   4056c:	df000215 	stw	fp,8(sp)
   40570:	df000204 	addi	fp,sp,8
   40574:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40578:	e0bfff17 	ldw	r2,-4(fp)
   4057c:	10800017 	ldw	r2,0(r2)
   40580:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   40584:	e0bffe17 	ldw	r2,-8(fp)
   40588:	10c00a04 	addi	r3,r2,40
   4058c:	e0bfff17 	ldw	r2,-4(fp)
   40590:	10800217 	ldw	r2,8(r2)
   40594:	100b883a 	mov	r5,r2
   40598:	1809883a 	mov	r4,r3
   4059c:	00409840 	call	40984 <altera_avalon_jtag_uart_close>
}
   405a0:	e037883a 	mov	sp,fp
   405a4:	dfc00117 	ldw	ra,4(sp)
   405a8:	df000017 	ldw	fp,0(sp)
   405ac:	dec00204 	addi	sp,sp,8
   405b0:	f800283a 	ret

000405b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   405b4:	defffa04 	addi	sp,sp,-24
   405b8:	dfc00515 	stw	ra,20(sp)
   405bc:	df000415 	stw	fp,16(sp)
   405c0:	df000404 	addi	fp,sp,16
   405c4:	e13ffd15 	stw	r4,-12(fp)
   405c8:	e17ffe15 	stw	r5,-8(fp)
   405cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   405d0:	e0bffd17 	ldw	r2,-12(fp)
   405d4:	10800017 	ldw	r2,0(r2)
   405d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   405dc:	e0bffc17 	ldw	r2,-16(fp)
   405e0:	10800a04 	addi	r2,r2,40
   405e4:	e1bfff17 	ldw	r6,-4(fp)
   405e8:	e17ffe17 	ldw	r5,-8(fp)
   405ec:	1009883a 	mov	r4,r2
   405f0:	00409ec0 	call	409ec <altera_avalon_jtag_uart_ioctl>
}
   405f4:	e037883a 	mov	sp,fp
   405f8:	dfc00117 	ldw	ra,4(sp)
   405fc:	df000017 	ldw	fp,0(sp)
   40600:	dec00204 	addi	sp,sp,8
   40604:	f800283a 	ret

00040608 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40608:	defffa04 	addi	sp,sp,-24
   4060c:	dfc00515 	stw	ra,20(sp)
   40610:	df000415 	stw	fp,16(sp)
   40614:	df000404 	addi	fp,sp,16
   40618:	e13ffd15 	stw	r4,-12(fp)
   4061c:	e17ffe15 	stw	r5,-8(fp)
   40620:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40624:	e0bffd17 	ldw	r2,-12(fp)
   40628:	00c00044 	movi	r3,1
   4062c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40630:	e0bffd17 	ldw	r2,-12(fp)
   40634:	10800017 	ldw	r2,0(r2)
   40638:	10800104 	addi	r2,r2,4
   4063c:	1007883a 	mov	r3,r2
   40640:	e0bffd17 	ldw	r2,-12(fp)
   40644:	10800817 	ldw	r2,32(r2)
   40648:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   4064c:	e0bffe17 	ldw	r2,-8(fp)
   40650:	e0ffff17 	ldw	r3,-4(fp)
   40654:	d8000015 	stw	zero,0(sp)
   40658:	e1fffd17 	ldw	r7,-12(fp)
   4065c:	01800134 	movhi	r6,4
   40660:	3181b404 	addi	r6,r6,1744
   40664:	180b883a 	mov	r5,r3
   40668:	1009883a 	mov	r4,r2
   4066c:	00413a40 	call	413a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   40670:	e0bffd17 	ldw	r2,-12(fp)
   40674:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40678:	e0bffd17 	ldw	r2,-12(fp)
   4067c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40680:	00800234 	movhi	r2,8
   40684:	1085a304 	addi	r2,r2,5772
   40688:	10800017 	ldw	r2,0(r2)
   4068c:	e1fffd17 	ldw	r7,-12(fp)
   40690:	01800134 	movhi	r6,4
   40694:	31823704 	addi	r6,r6,2268
   40698:	100b883a 	mov	r5,r2
   4069c:	1809883a 	mov	r4,r3
   406a0:	0040f1c0 	call	40f1c <alt_alarm_start>
   406a4:	1000040e 	bge	r2,zero,406b8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   406a8:	e0fffd17 	ldw	r3,-12(fp)
   406ac:	00a00034 	movhi	r2,32768
   406b0:	10bfffc4 	addi	r2,r2,-1
   406b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   406b8:	0001883a 	nop
   406bc:	e037883a 	mov	sp,fp
   406c0:	dfc00117 	ldw	ra,4(sp)
   406c4:	df000017 	ldw	fp,0(sp)
   406c8:	dec00204 	addi	sp,sp,8
   406cc:	f800283a 	ret

000406d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   406d0:	defff804 	addi	sp,sp,-32
   406d4:	df000715 	stw	fp,28(sp)
   406d8:	df000704 	addi	fp,sp,28
   406dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   406e0:	e0bfff17 	ldw	r2,-4(fp)
   406e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   406e8:	e0bffb17 	ldw	r2,-20(fp)
   406ec:	10800017 	ldw	r2,0(r2)
   406f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   406f4:	e0bffc17 	ldw	r2,-16(fp)
   406f8:	10800104 	addi	r2,r2,4
   406fc:	10800037 	ldwio	r2,0(r2)
   40700:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   40704:	e0bffd17 	ldw	r2,-12(fp)
   40708:	1080c00c 	andi	r2,r2,768
   4070c:	10006d26 	beq	r2,zero,408c4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   40710:	e0bffd17 	ldw	r2,-12(fp)
   40714:	1080400c 	andi	r2,r2,256
   40718:	10003526 	beq	r2,zero,407f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   4071c:	00800074 	movhi	r2,1
   40720:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40724:	e0bffb17 	ldw	r2,-20(fp)
   40728:	10800a17 	ldw	r2,40(r2)
   4072c:	10800044 	addi	r2,r2,1
   40730:	1081ffcc 	andi	r2,r2,2047
   40734:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   40738:	e0bffb17 	ldw	r2,-20(fp)
   4073c:	10c00b17 	ldw	r3,44(r2)
   40740:	e0bffe17 	ldw	r2,-8(fp)
   40744:	18801526 	beq	r3,r2,4079c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40748:	e0bffc17 	ldw	r2,-16(fp)
   4074c:	10800037 	ldwio	r2,0(r2)
   40750:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   40754:	e0bff917 	ldw	r2,-28(fp)
   40758:	10a0000c 	andi	r2,r2,32768
   4075c:	10001126 	beq	r2,zero,407a4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   40760:	e0bffb17 	ldw	r2,-20(fp)
   40764:	10800a17 	ldw	r2,40(r2)
   40768:	e0fff917 	ldw	r3,-28(fp)
   4076c:	1809883a 	mov	r4,r3
   40770:	e0fffb17 	ldw	r3,-20(fp)
   40774:	1885883a 	add	r2,r3,r2
   40778:	10800e04 	addi	r2,r2,56
   4077c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40780:	e0bffb17 	ldw	r2,-20(fp)
   40784:	10800a17 	ldw	r2,40(r2)
   40788:	10800044 	addi	r2,r2,1
   4078c:	10c1ffcc 	andi	r3,r2,2047
   40790:	e0bffb17 	ldw	r2,-20(fp)
   40794:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   40798:	003fe206 	br	40724 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   4079c:	0001883a 	nop
   407a0:	00000106 	br	407a8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   407a4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   407a8:	e0bff917 	ldw	r2,-28(fp)
   407ac:	10bfffec 	andhi	r2,r2,65535
   407b0:	10000f26 	beq	r2,zero,407f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   407b4:	e0bffb17 	ldw	r2,-20(fp)
   407b8:	10c00817 	ldw	r3,32(r2)
   407bc:	00bfff84 	movi	r2,-2
   407c0:	1886703a 	and	r3,r3,r2
   407c4:	e0bffb17 	ldw	r2,-20(fp)
   407c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   407cc:	e0bffc17 	ldw	r2,-16(fp)
   407d0:	10800104 	addi	r2,r2,4
   407d4:	1007883a 	mov	r3,r2
   407d8:	e0bffb17 	ldw	r2,-20(fp)
   407dc:	10800817 	ldw	r2,32(r2)
   407e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   407e4:	e0bffc17 	ldw	r2,-16(fp)
   407e8:	10800104 	addi	r2,r2,4
   407ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   407f0:	e0bffd17 	ldw	r2,-12(fp)
   407f4:	1080800c 	andi	r2,r2,512
   407f8:	103fbe26 	beq	r2,zero,406f4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   407fc:	e0bffd17 	ldw	r2,-12(fp)
   40800:	1004d43a 	srli	r2,r2,16
   40804:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   40808:	00001406 	br	4085c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   4080c:	e0bffc17 	ldw	r2,-16(fp)
   40810:	e0fffb17 	ldw	r3,-20(fp)
   40814:	18c00d17 	ldw	r3,52(r3)
   40818:	e13ffb17 	ldw	r4,-20(fp)
   4081c:	20c7883a 	add	r3,r4,r3
   40820:	18c20e04 	addi	r3,r3,2104
   40824:	18c00003 	ldbu	r3,0(r3)
   40828:	18c03fcc 	andi	r3,r3,255
   4082c:	18c0201c 	xori	r3,r3,128
   40830:	18ffe004 	addi	r3,r3,-128
   40834:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40838:	e0bffb17 	ldw	r2,-20(fp)
   4083c:	10800d17 	ldw	r2,52(r2)
   40840:	10800044 	addi	r2,r2,1
   40844:	10c1ffcc 	andi	r3,r2,2047
   40848:	e0bffb17 	ldw	r2,-20(fp)
   4084c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   40850:	e0bffa17 	ldw	r2,-24(fp)
   40854:	10bfffc4 	addi	r2,r2,-1
   40858:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   4085c:	e0bffa17 	ldw	r2,-24(fp)
   40860:	10000526 	beq	r2,zero,40878 <altera_avalon_jtag_uart_irq+0x1a8>
   40864:	e0bffb17 	ldw	r2,-20(fp)
   40868:	10c00d17 	ldw	r3,52(r2)
   4086c:	e0bffb17 	ldw	r2,-20(fp)
   40870:	10800c17 	ldw	r2,48(r2)
   40874:	18bfe51e 	bne	r3,r2,4080c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   40878:	e0bffa17 	ldw	r2,-24(fp)
   4087c:	103f9d26 	beq	r2,zero,406f4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40880:	e0bffb17 	ldw	r2,-20(fp)
   40884:	10c00817 	ldw	r3,32(r2)
   40888:	00bfff44 	movi	r2,-3
   4088c:	1886703a 	and	r3,r3,r2
   40890:	e0bffb17 	ldw	r2,-20(fp)
   40894:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40898:	e0bffb17 	ldw	r2,-20(fp)
   4089c:	10800017 	ldw	r2,0(r2)
   408a0:	10800104 	addi	r2,r2,4
   408a4:	1007883a 	mov	r3,r2
   408a8:	e0bffb17 	ldw	r2,-20(fp)
   408ac:	10800817 	ldw	r2,32(r2)
   408b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   408b4:	e0bffc17 	ldw	r2,-16(fp)
   408b8:	10800104 	addi	r2,r2,4
   408bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   408c0:	003f8c06 	br	406f4 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   408c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   408c8:	0001883a 	nop
   408cc:	e037883a 	mov	sp,fp
   408d0:	df000017 	ldw	fp,0(sp)
   408d4:	dec00104 	addi	sp,sp,4
   408d8:	f800283a 	ret

000408dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   408dc:	defff804 	addi	sp,sp,-32
   408e0:	df000715 	stw	fp,28(sp)
   408e4:	df000704 	addi	fp,sp,28
   408e8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   408ec:	e0bffb17 	ldw	r2,-20(fp)
   408f0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   408f4:	e0bff917 	ldw	r2,-28(fp)
   408f8:	10800017 	ldw	r2,0(r2)
   408fc:	10800104 	addi	r2,r2,4
   40900:	10800037 	ldwio	r2,0(r2)
   40904:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   40908:	e0bffa17 	ldw	r2,-24(fp)
   4090c:	1081000c 	andi	r2,r2,1024
   40910:	10000b26 	beq	r2,zero,40940 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   40914:	e0bff917 	ldw	r2,-28(fp)
   40918:	10800017 	ldw	r2,0(r2)
   4091c:	10800104 	addi	r2,r2,4
   40920:	1007883a 	mov	r3,r2
   40924:	e0bff917 	ldw	r2,-28(fp)
   40928:	10800817 	ldw	r2,32(r2)
   4092c:	10810014 	ori	r2,r2,1024
   40930:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   40934:	e0bff917 	ldw	r2,-28(fp)
   40938:	10000915 	stw	zero,36(r2)
   4093c:	00000a06 	br	40968 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   40940:	e0bff917 	ldw	r2,-28(fp)
   40944:	10c00917 	ldw	r3,36(r2)
   40948:	00a00034 	movhi	r2,32768
   4094c:	10bfff04 	addi	r2,r2,-4
   40950:	10c00536 	bltu	r2,r3,40968 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   40954:	e0bff917 	ldw	r2,-28(fp)
   40958:	10800917 	ldw	r2,36(r2)
   4095c:	10c00044 	addi	r3,r2,1
   40960:	e0bff917 	ldw	r2,-28(fp)
   40964:	10c00915 	stw	r3,36(r2)
   40968:	00800234 	movhi	r2,8
   4096c:	1085a304 	addi	r2,r2,5772
   40970:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   40974:	e037883a 	mov	sp,fp
   40978:	df000017 	ldw	fp,0(sp)
   4097c:	dec00104 	addi	sp,sp,4
   40980:	f800283a 	ret

00040984 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   40984:	defffd04 	addi	sp,sp,-12
   40988:	df000215 	stw	fp,8(sp)
   4098c:	df000204 	addi	fp,sp,8
   40990:	e13ffe15 	stw	r4,-8(fp)
   40994:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   40998:	00000506 	br	409b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   4099c:	e0bfff17 	ldw	r2,-4(fp)
   409a0:	1090000c 	andi	r2,r2,16384
   409a4:	10000226 	beq	r2,zero,409b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   409a8:	00bffd44 	movi	r2,-11
   409ac:	00000b06 	br	409dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   409b0:	e0bffe17 	ldw	r2,-8(fp)
   409b4:	10c00d17 	ldw	r3,52(r2)
   409b8:	e0bffe17 	ldw	r2,-8(fp)
   409bc:	10800c17 	ldw	r2,48(r2)
   409c0:	18800526 	beq	r3,r2,409d8 <altera_avalon_jtag_uart_close+0x54>
   409c4:	e0bffe17 	ldw	r2,-8(fp)
   409c8:	10c00917 	ldw	r3,36(r2)
   409cc:	e0bffe17 	ldw	r2,-8(fp)
   409d0:	10800117 	ldw	r2,4(r2)
   409d4:	18bff136 	bltu	r3,r2,4099c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   409d8:	0005883a 	mov	r2,zero
}
   409dc:	e037883a 	mov	sp,fp
   409e0:	df000017 	ldw	fp,0(sp)
   409e4:	dec00104 	addi	sp,sp,4
   409e8:	f800283a 	ret

000409ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   409ec:	defffa04 	addi	sp,sp,-24
   409f0:	df000515 	stw	fp,20(sp)
   409f4:	df000504 	addi	fp,sp,20
   409f8:	e13ffd15 	stw	r4,-12(fp)
   409fc:	e17ffe15 	stw	r5,-8(fp)
   40a00:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   40a04:	00bff9c4 	movi	r2,-25
   40a08:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   40a0c:	e0bffe17 	ldw	r2,-8(fp)
   40a10:	10da8060 	cmpeqi	r3,r2,27137
   40a14:	1800031e 	bne	r3,zero,40a24 <altera_avalon_jtag_uart_ioctl+0x38>
   40a18:	109a80a0 	cmpeqi	r2,r2,27138
   40a1c:	1000181e 	bne	r2,zero,40a80 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   40a20:	00002906 	br	40ac8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   40a24:	e0bffd17 	ldw	r2,-12(fp)
   40a28:	10c00117 	ldw	r3,4(r2)
   40a2c:	00a00034 	movhi	r2,32768
   40a30:	10bfffc4 	addi	r2,r2,-1
   40a34:	18802126 	beq	r3,r2,40abc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   40a38:	e0bfff17 	ldw	r2,-4(fp)
   40a3c:	10800017 	ldw	r2,0(r2)
   40a40:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   40a44:	e0bffc17 	ldw	r2,-16(fp)
   40a48:	10800090 	cmplti	r2,r2,2
   40a4c:	1000061e 	bne	r2,zero,40a68 <altera_avalon_jtag_uart_ioctl+0x7c>
   40a50:	e0fffc17 	ldw	r3,-16(fp)
   40a54:	00a00034 	movhi	r2,32768
   40a58:	10bfffc4 	addi	r2,r2,-1
   40a5c:	18800226 	beq	r3,r2,40a68 <altera_avalon_jtag_uart_ioctl+0x7c>
   40a60:	e0bffc17 	ldw	r2,-16(fp)
   40a64:	00000206 	br	40a70 <altera_avalon_jtag_uart_ioctl+0x84>
   40a68:	00a00034 	movhi	r2,32768
   40a6c:	10bfff84 	addi	r2,r2,-2
   40a70:	e0fffd17 	ldw	r3,-12(fp)
   40a74:	18800115 	stw	r2,4(r3)
      rc = 0;
   40a78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   40a7c:	00000f06 	br	40abc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   40a80:	e0bffd17 	ldw	r2,-12(fp)
   40a84:	10c00117 	ldw	r3,4(r2)
   40a88:	00a00034 	movhi	r2,32768
   40a8c:	10bfffc4 	addi	r2,r2,-1
   40a90:	18800c26 	beq	r3,r2,40ac4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   40a94:	e0bffd17 	ldw	r2,-12(fp)
   40a98:	10c00917 	ldw	r3,36(r2)
   40a9c:	e0bffd17 	ldw	r2,-12(fp)
   40aa0:	10800117 	ldw	r2,4(r2)
   40aa4:	1885803a 	cmpltu	r2,r3,r2
   40aa8:	10c03fcc 	andi	r3,r2,255
   40aac:	e0bfff17 	ldw	r2,-4(fp)
   40ab0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   40ab4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   40ab8:	00000206 	br	40ac4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   40abc:	0001883a 	nop
   40ac0:	00000106 	br	40ac8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   40ac4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   40ac8:	e0bffb17 	ldw	r2,-20(fp)
}
   40acc:	e037883a 	mov	sp,fp
   40ad0:	df000017 	ldw	fp,0(sp)
   40ad4:	dec00104 	addi	sp,sp,4
   40ad8:	f800283a 	ret

00040adc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   40adc:	defff304 	addi	sp,sp,-52
   40ae0:	dfc00c15 	stw	ra,48(sp)
   40ae4:	df000b15 	stw	fp,44(sp)
   40ae8:	df000b04 	addi	fp,sp,44
   40aec:	e13ffc15 	stw	r4,-16(fp)
   40af0:	e17ffd15 	stw	r5,-12(fp)
   40af4:	e1bffe15 	stw	r6,-8(fp)
   40af8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   40afc:	e0bffd17 	ldw	r2,-12(fp)
   40b00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40b04:	00004706 	br	40c24 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   40b08:	e0bffc17 	ldw	r2,-16(fp)
   40b0c:	10800a17 	ldw	r2,40(r2)
   40b10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   40b14:	e0bffc17 	ldw	r2,-16(fp)
   40b18:	10800b17 	ldw	r2,44(r2)
   40b1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   40b20:	e0fff717 	ldw	r3,-36(fp)
   40b24:	e0bff817 	ldw	r2,-32(fp)
   40b28:	18800536 	bltu	r3,r2,40b40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   40b2c:	e0fff717 	ldw	r3,-36(fp)
   40b30:	e0bff817 	ldw	r2,-32(fp)
   40b34:	1885c83a 	sub	r2,r3,r2
   40b38:	e0bff615 	stw	r2,-40(fp)
   40b3c:	00000406 	br	40b50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   40b40:	00c20004 	movi	r3,2048
   40b44:	e0bff817 	ldw	r2,-32(fp)
   40b48:	1885c83a 	sub	r2,r3,r2
   40b4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   40b50:	e0bff617 	ldw	r2,-40(fp)
   40b54:	10001e26 	beq	r2,zero,40bd0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   40b58:	e0fffe17 	ldw	r3,-8(fp)
   40b5c:	e0bff617 	ldw	r2,-40(fp)
   40b60:	1880022e 	bgeu	r3,r2,40b6c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   40b64:	e0bffe17 	ldw	r2,-8(fp)
   40b68:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   40b6c:	e0bffc17 	ldw	r2,-16(fp)
   40b70:	10c00e04 	addi	r3,r2,56
   40b74:	e0bff817 	ldw	r2,-32(fp)
   40b78:	1885883a 	add	r2,r3,r2
   40b7c:	e1bff617 	ldw	r6,-40(fp)
   40b80:	100b883a 	mov	r5,r2
   40b84:	e13ff517 	ldw	r4,-44(fp)
   40b88:	00419a80 	call	419a8 <memcpy>
      ptr   += n;
   40b8c:	e0fff517 	ldw	r3,-44(fp)
   40b90:	e0bff617 	ldw	r2,-40(fp)
   40b94:	1885883a 	add	r2,r3,r2
   40b98:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   40b9c:	e0fffe17 	ldw	r3,-8(fp)
   40ba0:	e0bff617 	ldw	r2,-40(fp)
   40ba4:	1885c83a 	sub	r2,r3,r2
   40ba8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40bac:	e0fff817 	ldw	r3,-32(fp)
   40bb0:	e0bff617 	ldw	r2,-40(fp)
   40bb4:	1885883a 	add	r2,r3,r2
   40bb8:	10c1ffcc 	andi	r3,r2,2047
   40bbc:	e0bffc17 	ldw	r2,-16(fp)
   40bc0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   40bc4:	e0bffe17 	ldw	r2,-8(fp)
   40bc8:	00bfcf16 	blt	zero,r2,40b08 <altera_avalon_jtag_uart_read+0x2c>
   40bcc:	00000106 	br	40bd4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   40bd0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   40bd4:	e0fff517 	ldw	r3,-44(fp)
   40bd8:	e0bffd17 	ldw	r2,-12(fp)
   40bdc:	1880141e 	bne	r3,r2,40c30 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   40be0:	e0bfff17 	ldw	r2,-4(fp)
   40be4:	1090000c 	andi	r2,r2,16384
   40be8:	1000131e 	bne	r2,zero,40c38 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   40bec:	0001883a 	nop
   40bf0:	e0bffc17 	ldw	r2,-16(fp)
   40bf4:	10c00a17 	ldw	r3,40(r2)
   40bf8:	e0bff717 	ldw	r2,-36(fp)
   40bfc:	1880051e 	bne	r3,r2,40c14 <altera_avalon_jtag_uart_read+0x138>
   40c00:	e0bffc17 	ldw	r2,-16(fp)
   40c04:	10c00917 	ldw	r3,36(r2)
   40c08:	e0bffc17 	ldw	r2,-16(fp)
   40c0c:	10800117 	ldw	r2,4(r2)
   40c10:	18bff736 	bltu	r3,r2,40bf0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   40c14:	e0bffc17 	ldw	r2,-16(fp)
   40c18:	10c00a17 	ldw	r3,40(r2)
   40c1c:	e0bff717 	ldw	r2,-36(fp)
   40c20:	18800726 	beq	r3,r2,40c40 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   40c24:	e0bffe17 	ldw	r2,-8(fp)
   40c28:	00bfb716 	blt	zero,r2,40b08 <altera_avalon_jtag_uart_read+0x2c>
   40c2c:	00000506 	br	40c44 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   40c30:	0001883a 	nop
   40c34:	00000306 	br	40c44 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   40c38:	0001883a 	nop
   40c3c:	00000106 	br	40c44 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   40c40:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   40c44:	e0fff517 	ldw	r3,-44(fp)
   40c48:	e0bffd17 	ldw	r2,-12(fp)
   40c4c:	18801826 	beq	r3,r2,40cb0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40c50:	0005303a 	rdctl	r2,status
   40c54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40c58:	e0fffb17 	ldw	r3,-20(fp)
   40c5c:	00bfff84 	movi	r2,-2
   40c60:	1884703a 	and	r2,r3,r2
   40c64:	1001703a 	wrctl	status,r2
  
  return context;
   40c68:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   40c6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40c70:	e0bffc17 	ldw	r2,-16(fp)
   40c74:	10800817 	ldw	r2,32(r2)
   40c78:	10c00054 	ori	r3,r2,1
   40c7c:	e0bffc17 	ldw	r2,-16(fp)
   40c80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40c84:	e0bffc17 	ldw	r2,-16(fp)
   40c88:	10800017 	ldw	r2,0(r2)
   40c8c:	10800104 	addi	r2,r2,4
   40c90:	1007883a 	mov	r3,r2
   40c94:	e0bffc17 	ldw	r2,-16(fp)
   40c98:	10800817 	ldw	r2,32(r2)
   40c9c:	18800035 	stwio	r2,0(r3)
   40ca0:	e0bffa17 	ldw	r2,-24(fp)
   40ca4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40ca8:	e0bff917 	ldw	r2,-28(fp)
   40cac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   40cb0:	e0fff517 	ldw	r3,-44(fp)
   40cb4:	e0bffd17 	ldw	r2,-12(fp)
   40cb8:	18800426 	beq	r3,r2,40ccc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   40cbc:	e0fff517 	ldw	r3,-44(fp)
   40cc0:	e0bffd17 	ldw	r2,-12(fp)
   40cc4:	1885c83a 	sub	r2,r3,r2
   40cc8:	00000606 	br	40ce4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   40ccc:	e0bfff17 	ldw	r2,-4(fp)
   40cd0:	1090000c 	andi	r2,r2,16384
   40cd4:	10000226 	beq	r2,zero,40ce0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   40cd8:	00bffd44 	movi	r2,-11
   40cdc:	00000106 	br	40ce4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   40ce0:	00bffec4 	movi	r2,-5
}
   40ce4:	e037883a 	mov	sp,fp
   40ce8:	dfc00117 	ldw	ra,4(sp)
   40cec:	df000017 	ldw	fp,0(sp)
   40cf0:	dec00204 	addi	sp,sp,8
   40cf4:	f800283a 	ret

00040cf8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   40cf8:	defff304 	addi	sp,sp,-52
   40cfc:	dfc00c15 	stw	ra,48(sp)
   40d00:	df000b15 	stw	fp,44(sp)
   40d04:	df000b04 	addi	fp,sp,44
   40d08:	e13ffc15 	stw	r4,-16(fp)
   40d0c:	e17ffd15 	stw	r5,-12(fp)
   40d10:	e1bffe15 	stw	r6,-8(fp)
   40d14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   40d18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   40d1c:	e0bffd17 	ldw	r2,-12(fp)
   40d20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   40d24:	00003706 	br	40e04 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   40d28:	e0bffc17 	ldw	r2,-16(fp)
   40d2c:	10800c17 	ldw	r2,48(r2)
   40d30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   40d34:	e0bffc17 	ldw	r2,-16(fp)
   40d38:	10800d17 	ldw	r2,52(r2)
   40d3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   40d40:	e0fff917 	ldw	r3,-28(fp)
   40d44:	e0bff517 	ldw	r2,-44(fp)
   40d48:	1880062e 	bgeu	r3,r2,40d64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   40d4c:	e0fff517 	ldw	r3,-44(fp)
   40d50:	e0bff917 	ldw	r2,-28(fp)
   40d54:	1885c83a 	sub	r2,r3,r2
   40d58:	10bfffc4 	addi	r2,r2,-1
   40d5c:	e0bff615 	stw	r2,-40(fp)
   40d60:	00000b06 	br	40d90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   40d64:	e0bff517 	ldw	r2,-44(fp)
   40d68:	10000526 	beq	r2,zero,40d80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   40d6c:	00c20004 	movi	r3,2048
   40d70:	e0bff917 	ldw	r2,-28(fp)
   40d74:	1885c83a 	sub	r2,r3,r2
   40d78:	e0bff615 	stw	r2,-40(fp)
   40d7c:	00000406 	br	40d90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   40d80:	00c1ffc4 	movi	r3,2047
   40d84:	e0bff917 	ldw	r2,-28(fp)
   40d88:	1885c83a 	sub	r2,r3,r2
   40d8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   40d90:	e0bff617 	ldw	r2,-40(fp)
   40d94:	10001e26 	beq	r2,zero,40e10 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   40d98:	e0fffe17 	ldw	r3,-8(fp)
   40d9c:	e0bff617 	ldw	r2,-40(fp)
   40da0:	1880022e 	bgeu	r3,r2,40dac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   40da4:	e0bffe17 	ldw	r2,-8(fp)
   40da8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   40dac:	e0bffc17 	ldw	r2,-16(fp)
   40db0:	10c20e04 	addi	r3,r2,2104
   40db4:	e0bff917 	ldw	r2,-28(fp)
   40db8:	1885883a 	add	r2,r3,r2
   40dbc:	e1bff617 	ldw	r6,-40(fp)
   40dc0:	e17ffd17 	ldw	r5,-12(fp)
   40dc4:	1009883a 	mov	r4,r2
   40dc8:	00419a80 	call	419a8 <memcpy>
      ptr   += n;
   40dcc:	e0fffd17 	ldw	r3,-12(fp)
   40dd0:	e0bff617 	ldw	r2,-40(fp)
   40dd4:	1885883a 	add	r2,r3,r2
   40dd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   40ddc:	e0fffe17 	ldw	r3,-8(fp)
   40de0:	e0bff617 	ldw	r2,-40(fp)
   40de4:	1885c83a 	sub	r2,r3,r2
   40de8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40dec:	e0fff917 	ldw	r3,-28(fp)
   40df0:	e0bff617 	ldw	r2,-40(fp)
   40df4:	1885883a 	add	r2,r3,r2
   40df8:	10c1ffcc 	andi	r3,r2,2047
   40dfc:	e0bffc17 	ldw	r2,-16(fp)
   40e00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   40e04:	e0bffe17 	ldw	r2,-8(fp)
   40e08:	00bfc716 	blt	zero,r2,40d28 <altera_avalon_jtag_uart_write+0x30>
   40e0c:	00000106 	br	40e14 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   40e10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40e14:	0005303a 	rdctl	r2,status
   40e18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40e1c:	e0fffb17 	ldw	r3,-20(fp)
   40e20:	00bfff84 	movi	r2,-2
   40e24:	1884703a 	and	r2,r3,r2
   40e28:	1001703a 	wrctl	status,r2
  
  return context;
   40e2c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   40e30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   40e34:	e0bffc17 	ldw	r2,-16(fp)
   40e38:	10800817 	ldw	r2,32(r2)
   40e3c:	10c00094 	ori	r3,r2,2
   40e40:	e0bffc17 	ldw	r2,-16(fp)
   40e44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   40e48:	e0bffc17 	ldw	r2,-16(fp)
   40e4c:	10800017 	ldw	r2,0(r2)
   40e50:	10800104 	addi	r2,r2,4
   40e54:	1007883a 	mov	r3,r2
   40e58:	e0bffc17 	ldw	r2,-16(fp)
   40e5c:	10800817 	ldw	r2,32(r2)
   40e60:	18800035 	stwio	r2,0(r3)
   40e64:	e0bffa17 	ldw	r2,-24(fp)
   40e68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   40e6c:	e0bff817 	ldw	r2,-32(fp)
   40e70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   40e74:	e0bffe17 	ldw	r2,-8(fp)
   40e78:	0080100e 	bge	zero,r2,40ebc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   40e7c:	e0bfff17 	ldw	r2,-4(fp)
   40e80:	1090000c 	andi	r2,r2,16384
   40e84:	1000101e 	bne	r2,zero,40ec8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   40e88:	0001883a 	nop
   40e8c:	e0bffc17 	ldw	r2,-16(fp)
   40e90:	10c00d17 	ldw	r3,52(r2)
   40e94:	e0bff517 	ldw	r2,-44(fp)
   40e98:	1880051e 	bne	r3,r2,40eb0 <altera_avalon_jtag_uart_write+0x1b8>
   40e9c:	e0bffc17 	ldw	r2,-16(fp)
   40ea0:	10c00917 	ldw	r3,36(r2)
   40ea4:	e0bffc17 	ldw	r2,-16(fp)
   40ea8:	10800117 	ldw	r2,4(r2)
   40eac:	18bff736 	bltu	r3,r2,40e8c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   40eb0:	e0bffc17 	ldw	r2,-16(fp)
   40eb4:	10800917 	ldw	r2,36(r2)
   40eb8:	1000051e 	bne	r2,zero,40ed0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   40ebc:	e0bffe17 	ldw	r2,-8(fp)
   40ec0:	00bfd016 	blt	zero,r2,40e04 <altera_avalon_jtag_uart_write+0x10c>
   40ec4:	00000306 	br	40ed4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   40ec8:	0001883a 	nop
   40ecc:	00000106 	br	40ed4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   40ed0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   40ed4:	e0fffd17 	ldw	r3,-12(fp)
   40ed8:	e0bff717 	ldw	r2,-36(fp)
   40edc:	18800426 	beq	r3,r2,40ef0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   40ee0:	e0fffd17 	ldw	r3,-12(fp)
   40ee4:	e0bff717 	ldw	r2,-36(fp)
   40ee8:	1885c83a 	sub	r2,r3,r2
   40eec:	00000606 	br	40f08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   40ef0:	e0bfff17 	ldw	r2,-4(fp)
   40ef4:	1090000c 	andi	r2,r2,16384
   40ef8:	10000226 	beq	r2,zero,40f04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   40efc:	00bffd44 	movi	r2,-11
   40f00:	00000106 	br	40f08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   40f04:	00bffec4 	movi	r2,-5
}
   40f08:	e037883a 	mov	sp,fp
   40f0c:	dfc00117 	ldw	ra,4(sp)
   40f10:	df000017 	ldw	fp,0(sp)
   40f14:	dec00204 	addi	sp,sp,8
   40f18:	f800283a 	ret

00040f1c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   40f1c:	defff504 	addi	sp,sp,-44
   40f20:	df000a15 	stw	fp,40(sp)
   40f24:	df000a04 	addi	fp,sp,40
   40f28:	e13ffc15 	stw	r4,-16(fp)
   40f2c:	e17ffd15 	stw	r5,-12(fp)
   40f30:	e1bffe15 	stw	r6,-8(fp)
   40f34:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   40f38:	e03ff615 	stw	zero,-40(fp)
   40f3c:	00800234 	movhi	r2,8
   40f40:	1085a304 	addi	r2,r2,5772
   40f44:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   40f48:	10003f26 	beq	r2,zero,41048 <alt_alarm_start+0x12c>
  {
    if (alarm)
   40f4c:	e0bffc17 	ldw	r2,-16(fp)
   40f50:	10003b26 	beq	r2,zero,41040 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   40f54:	e0bffc17 	ldw	r2,-16(fp)
   40f58:	e0fffe17 	ldw	r3,-8(fp)
   40f5c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   40f60:	e0bffc17 	ldw	r2,-16(fp)
   40f64:	e0ffff17 	ldw	r3,-4(fp)
   40f68:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   40f6c:	0005303a 	rdctl	r2,status
   40f70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   40f74:	e0fff917 	ldw	r3,-28(fp)
   40f78:	00bfff84 	movi	r2,-2
   40f7c:	1884703a 	and	r2,r3,r2
   40f80:	1001703a 	wrctl	status,r2
  
  return context;
   40f84:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   40f88:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   40f8c:	00800234 	movhi	r2,8
   40f90:	1085a404 	addi	r2,r2,5776
   40f94:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   40f98:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   40f9c:	e0fffd17 	ldw	r3,-12(fp)
   40fa0:	e0bff617 	ldw	r2,-40(fp)
   40fa4:	1885883a 	add	r2,r3,r2
   40fa8:	10c00044 	addi	r3,r2,1
   40fac:	e0bffc17 	ldw	r2,-16(fp)
   40fb0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   40fb4:	e0bffc17 	ldw	r2,-16(fp)
   40fb8:	10c00217 	ldw	r3,8(r2)
   40fbc:	e0bff617 	ldw	r2,-40(fp)
   40fc0:	1880042e 	bgeu	r3,r2,40fd4 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   40fc4:	e0bffc17 	ldw	r2,-16(fp)
   40fc8:	00c00044 	movi	r3,1
   40fcc:	10c00405 	stb	r3,16(r2)
   40fd0:	00000206 	br	40fdc <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   40fd4:	e0bffc17 	ldw	r2,-16(fp)
   40fd8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   40fdc:	e0fffc17 	ldw	r3,-16(fp)
   40fe0:	00800234 	movhi	r2,8
   40fe4:	10859b04 	addi	r2,r2,5740
   40fe8:	e0bffa15 	stw	r2,-24(fp)
   40fec:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   40ff0:	e0bffb17 	ldw	r2,-20(fp)
   40ff4:	e0fffa17 	ldw	r3,-24(fp)
   40ff8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   40ffc:	e0bffa17 	ldw	r2,-24(fp)
   41000:	10c00017 	ldw	r3,0(r2)
   41004:	e0bffb17 	ldw	r2,-20(fp)
   41008:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   4100c:	e0bffa17 	ldw	r2,-24(fp)
   41010:	10800017 	ldw	r2,0(r2)
   41014:	e0fffb17 	ldw	r3,-20(fp)
   41018:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   4101c:	e0bffa17 	ldw	r2,-24(fp)
   41020:	e0fffb17 	ldw	r3,-20(fp)
   41024:	10c00015 	stw	r3,0(r2)
   41028:	e0bff817 	ldw	r2,-32(fp)
   4102c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41030:	e0bff717 	ldw	r2,-36(fp)
   41034:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   41038:	0005883a 	mov	r2,zero
   4103c:	00000306 	br	4104c <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   41040:	00bffa84 	movi	r2,-22
   41044:	00000106 	br	4104c <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   41048:	00bfde84 	movi	r2,-134
  }
}
   4104c:	e037883a 	mov	sp,fp
   41050:	df000017 	ldw	fp,0(sp)
   41054:	dec00104 	addi	sp,sp,4
   41058:	f800283a 	ret

0004105c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4105c:	defffe04 	addi	sp,sp,-8
   41060:	dfc00115 	stw	ra,4(sp)
   41064:	df000015 	stw	fp,0(sp)
   41068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4106c:	00800234 	movhi	r2,8
   41070:	10859904 	addi	r2,r2,5732
   41074:	10800017 	ldw	r2,0(r2)
   41078:	10000526 	beq	r2,zero,41090 <alt_get_errno+0x34>
   4107c:	00800234 	movhi	r2,8
   41080:	10859904 	addi	r2,r2,5732
   41084:	10800017 	ldw	r2,0(r2)
   41088:	103ee83a 	callr	r2
   4108c:	00000206 	br	41098 <alt_get_errno+0x3c>
   41090:	00800234 	movhi	r2,8
   41094:	1085a604 	addi	r2,r2,5784
}
   41098:	e037883a 	mov	sp,fp
   4109c:	dfc00117 	ldw	ra,4(sp)
   410a0:	df000017 	ldw	fp,0(sp)
   410a4:	dec00204 	addi	sp,sp,8
   410a8:	f800283a 	ret

000410ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   410ac:	defffb04 	addi	sp,sp,-20
   410b0:	dfc00415 	stw	ra,16(sp)
   410b4:	df000315 	stw	fp,12(sp)
   410b8:	df000304 	addi	fp,sp,12
   410bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   410c0:	e0bfff17 	ldw	r2,-4(fp)
   410c4:	10000816 	blt	r2,zero,410e8 <close+0x3c>
   410c8:	01400304 	movi	r5,12
   410cc:	e13fff17 	ldw	r4,-4(fp)
   410d0:	0041d880 	call	41d88 <__mulsi3>
   410d4:	1007883a 	mov	r3,r2
   410d8:	00800234 	movhi	r2,8
   410dc:	10842b04 	addi	r2,r2,4268
   410e0:	1885883a 	add	r2,r3,r2
   410e4:	00000106 	br	410ec <close+0x40>
   410e8:	0005883a 	mov	r2,zero
   410ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   410f0:	e0bffd17 	ldw	r2,-12(fp)
   410f4:	10001926 	beq	r2,zero,4115c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   410f8:	e0bffd17 	ldw	r2,-12(fp)
   410fc:	10800017 	ldw	r2,0(r2)
   41100:	10800417 	ldw	r2,16(r2)
   41104:	10000626 	beq	r2,zero,41120 <close+0x74>
   41108:	e0bffd17 	ldw	r2,-12(fp)
   4110c:	10800017 	ldw	r2,0(r2)
   41110:	10800417 	ldw	r2,16(r2)
   41114:	e13ffd17 	ldw	r4,-12(fp)
   41118:	103ee83a 	callr	r2
   4111c:	00000106 	br	41124 <close+0x78>
   41120:	0005883a 	mov	r2,zero
   41124:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   41128:	e13fff17 	ldw	r4,-4(fp)
   4112c:	00416740 	call	41674 <alt_release_fd>
    if (rval < 0)
   41130:	e0bffe17 	ldw	r2,-8(fp)
   41134:	1000070e 	bge	r2,zero,41154 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   41138:	004105c0 	call	4105c <alt_get_errno>
   4113c:	1007883a 	mov	r3,r2
   41140:	e0bffe17 	ldw	r2,-8(fp)
   41144:	0085c83a 	sub	r2,zero,r2
   41148:	18800015 	stw	r2,0(r3)
      return -1;
   4114c:	00bfffc4 	movi	r2,-1
   41150:	00000706 	br	41170 <close+0xc4>
    }
    return 0;
   41154:	0005883a 	mov	r2,zero
   41158:	00000506 	br	41170 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4115c:	004105c0 	call	4105c <alt_get_errno>
   41160:	1007883a 	mov	r3,r2
   41164:	00801444 	movi	r2,81
   41168:	18800015 	stw	r2,0(r3)
    return -1;
   4116c:	00bfffc4 	movi	r2,-1
  }
}
   41170:	e037883a 	mov	sp,fp
   41174:	dfc00117 	ldw	ra,4(sp)
   41178:	df000017 	ldw	fp,0(sp)
   4117c:	dec00204 	addi	sp,sp,8
   41180:	f800283a 	ret

00041184 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   41184:	deffff04 	addi	sp,sp,-4
   41188:	df000015 	stw	fp,0(sp)
   4118c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   41190:	0001883a 	nop
   41194:	e037883a 	mov	sp,fp
   41198:	df000017 	ldw	fp,0(sp)
   4119c:	dec00104 	addi	sp,sp,4
   411a0:	f800283a 	ret

000411a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   411a4:	defffc04 	addi	sp,sp,-16
   411a8:	df000315 	stw	fp,12(sp)
   411ac:	df000304 	addi	fp,sp,12
   411b0:	e13ffd15 	stw	r4,-12(fp)
   411b4:	e17ffe15 	stw	r5,-8(fp)
   411b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   411bc:	e0bfff17 	ldw	r2,-4(fp)
}
   411c0:	e037883a 	mov	sp,fp
   411c4:	df000017 	ldw	fp,0(sp)
   411c8:	dec00104 	addi	sp,sp,4
   411cc:	f800283a 	ret

000411d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   411d0:	defffe04 	addi	sp,sp,-8
   411d4:	dfc00115 	stw	ra,4(sp)
   411d8:	df000015 	stw	fp,0(sp)
   411dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   411e0:	00800234 	movhi	r2,8
   411e4:	10859904 	addi	r2,r2,5732
   411e8:	10800017 	ldw	r2,0(r2)
   411ec:	10000526 	beq	r2,zero,41204 <alt_get_errno+0x34>
   411f0:	00800234 	movhi	r2,8
   411f4:	10859904 	addi	r2,r2,5732
   411f8:	10800017 	ldw	r2,0(r2)
   411fc:	103ee83a 	callr	r2
   41200:	00000206 	br	4120c <alt_get_errno+0x3c>
   41204:	00800234 	movhi	r2,8
   41208:	1085a604 	addi	r2,r2,5784
}
   4120c:	e037883a 	mov	sp,fp
   41210:	dfc00117 	ldw	ra,4(sp)
   41214:	df000017 	ldw	fp,0(sp)
   41218:	dec00204 	addi	sp,sp,8
   4121c:	f800283a 	ret

00041220 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   41220:	defffa04 	addi	sp,sp,-24
   41224:	dfc00515 	stw	ra,20(sp)
   41228:	df000415 	stw	fp,16(sp)
   4122c:	df000404 	addi	fp,sp,16
   41230:	e13ffe15 	stw	r4,-8(fp)
   41234:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   41238:	e0bffe17 	ldw	r2,-8(fp)
   4123c:	10000326 	beq	r2,zero,4124c <alt_dev_llist_insert+0x2c>
   41240:	e0bffe17 	ldw	r2,-8(fp)
   41244:	10800217 	ldw	r2,8(r2)
   41248:	1000061e 	bne	r2,zero,41264 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   4124c:	00411d00 	call	411d0 <alt_get_errno>
   41250:	1007883a 	mov	r3,r2
   41254:	00800584 	movi	r2,22
   41258:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   4125c:	00bffa84 	movi	r2,-22
   41260:	00001306 	br	412b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   41264:	e0bffe17 	ldw	r2,-8(fp)
   41268:	e0ffff17 	ldw	r3,-4(fp)
   4126c:	e0fffc15 	stw	r3,-16(fp)
   41270:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41274:	e0bffd17 	ldw	r2,-12(fp)
   41278:	e0fffc17 	ldw	r3,-16(fp)
   4127c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   41280:	e0bffc17 	ldw	r2,-16(fp)
   41284:	10c00017 	ldw	r3,0(r2)
   41288:	e0bffd17 	ldw	r2,-12(fp)
   4128c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41290:	e0bffc17 	ldw	r2,-16(fp)
   41294:	10800017 	ldw	r2,0(r2)
   41298:	e0fffd17 	ldw	r3,-12(fp)
   4129c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   412a0:	e0bffc17 	ldw	r2,-16(fp)
   412a4:	e0fffd17 	ldw	r3,-12(fp)
   412a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   412ac:	0005883a 	mov	r2,zero
}
   412b0:	e037883a 	mov	sp,fp
   412b4:	dfc00117 	ldw	ra,4(sp)
   412b8:	df000017 	ldw	fp,0(sp)
   412bc:	dec00204 	addi	sp,sp,8
   412c0:	f800283a 	ret

000412c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   412c4:	defffd04 	addi	sp,sp,-12
   412c8:	dfc00215 	stw	ra,8(sp)
   412cc:	df000115 	stw	fp,4(sp)
   412d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   412d4:	00800134 	movhi	r2,4
   412d8:	10877804 	addi	r2,r2,7648
   412dc:	e0bfff15 	stw	r2,-4(fp)
   412e0:	00000606 	br	412fc <_do_ctors+0x38>
        (*ctor) (); 
   412e4:	e0bfff17 	ldw	r2,-4(fp)
   412e8:	10800017 	ldw	r2,0(r2)
   412ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   412f0:	e0bfff17 	ldw	r2,-4(fp)
   412f4:	10bfff04 	addi	r2,r2,-4
   412f8:	e0bfff15 	stw	r2,-4(fp)
   412fc:	e0ffff17 	ldw	r3,-4(fp)
   41300:	00800134 	movhi	r2,4
   41304:	10877904 	addi	r2,r2,7652
   41308:	18bff62e 	bgeu	r3,r2,412e4 <_do_ctors+0x20>
        (*ctor) (); 
}
   4130c:	0001883a 	nop
   41310:	e037883a 	mov	sp,fp
   41314:	dfc00117 	ldw	ra,4(sp)
   41318:	df000017 	ldw	fp,0(sp)
   4131c:	dec00204 	addi	sp,sp,8
   41320:	f800283a 	ret

00041324 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   41324:	defffd04 	addi	sp,sp,-12
   41328:	dfc00215 	stw	ra,8(sp)
   4132c:	df000115 	stw	fp,4(sp)
   41330:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41334:	00800134 	movhi	r2,4
   41338:	10877804 	addi	r2,r2,7648
   4133c:	e0bfff15 	stw	r2,-4(fp)
   41340:	00000606 	br	4135c <_do_dtors+0x38>
        (*dtor) (); 
   41344:	e0bfff17 	ldw	r2,-4(fp)
   41348:	10800017 	ldw	r2,0(r2)
   4134c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41350:	e0bfff17 	ldw	r2,-4(fp)
   41354:	10bfff04 	addi	r2,r2,-4
   41358:	e0bfff15 	stw	r2,-4(fp)
   4135c:	e0ffff17 	ldw	r3,-4(fp)
   41360:	00800134 	movhi	r2,4
   41364:	10877904 	addi	r2,r2,7652
   41368:	18bff62e 	bgeu	r3,r2,41344 <_do_dtors+0x20>
        (*dtor) (); 
}
   4136c:	0001883a 	nop
   41370:	e037883a 	mov	sp,fp
   41374:	dfc00117 	ldw	ra,4(sp)
   41378:	df000017 	ldw	fp,0(sp)
   4137c:	dec00204 	addi	sp,sp,8
   41380:	f800283a 	ret

00041384 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   41384:	deffff04 	addi	sp,sp,-4
   41388:	df000015 	stw	fp,0(sp)
   4138c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   41390:	0001883a 	nop
   41394:	e037883a 	mov	sp,fp
   41398:	df000017 	ldw	fp,0(sp)
   4139c:	dec00104 	addi	sp,sp,4
   413a0:	f800283a 	ret

000413a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   413a4:	defff904 	addi	sp,sp,-28
   413a8:	dfc00615 	stw	ra,24(sp)
   413ac:	df000515 	stw	fp,20(sp)
   413b0:	df000504 	addi	fp,sp,20
   413b4:	e13ffc15 	stw	r4,-16(fp)
   413b8:	e17ffd15 	stw	r5,-12(fp)
   413bc:	e1bffe15 	stw	r6,-8(fp)
   413c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   413c4:	e0800217 	ldw	r2,8(fp)
   413c8:	d8800015 	stw	r2,0(sp)
   413cc:	e1ffff17 	ldw	r7,-4(fp)
   413d0:	e1bffe17 	ldw	r6,-8(fp)
   413d4:	e17ffd17 	ldw	r5,-12(fp)
   413d8:	e13ffc17 	ldw	r4,-16(fp)
   413dc:	00415840 	call	41584 <alt_iic_isr_register>
}  
   413e0:	e037883a 	mov	sp,fp
   413e4:	dfc00117 	ldw	ra,4(sp)
   413e8:	df000017 	ldw	fp,0(sp)
   413ec:	dec00204 	addi	sp,sp,8
   413f0:	f800283a 	ret

000413f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   413f4:	defff904 	addi	sp,sp,-28
   413f8:	df000615 	stw	fp,24(sp)
   413fc:	df000604 	addi	fp,sp,24
   41400:	e13ffe15 	stw	r4,-8(fp)
   41404:	e17fff15 	stw	r5,-4(fp)
   41408:	e0bfff17 	ldw	r2,-4(fp)
   4140c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41410:	0005303a 	rdctl	r2,status
   41414:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41418:	e0fffb17 	ldw	r3,-20(fp)
   4141c:	00bfff84 	movi	r2,-2
   41420:	1884703a 	and	r2,r3,r2
   41424:	1001703a 	wrctl	status,r2
  
  return context;
   41428:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   4142c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   41430:	00c00044 	movi	r3,1
   41434:	e0bffa17 	ldw	r2,-24(fp)
   41438:	1884983a 	sll	r2,r3,r2
   4143c:	1007883a 	mov	r3,r2
   41440:	00800234 	movhi	r2,8
   41444:	1085a204 	addi	r2,r2,5768
   41448:	10800017 	ldw	r2,0(r2)
   4144c:	1886b03a 	or	r3,r3,r2
   41450:	00800234 	movhi	r2,8
   41454:	1085a204 	addi	r2,r2,5768
   41458:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4145c:	00800234 	movhi	r2,8
   41460:	1085a204 	addi	r2,r2,5768
   41464:	10800017 	ldw	r2,0(r2)
   41468:	100170fa 	wrctl	ienable,r2
   4146c:	e0bffc17 	ldw	r2,-16(fp)
   41470:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41474:	e0bffd17 	ldw	r2,-12(fp)
   41478:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   4147c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   41480:	0001883a 	nop
}
   41484:	e037883a 	mov	sp,fp
   41488:	df000017 	ldw	fp,0(sp)
   4148c:	dec00104 	addi	sp,sp,4
   41490:	f800283a 	ret

00041494 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   41494:	defff904 	addi	sp,sp,-28
   41498:	df000615 	stw	fp,24(sp)
   4149c:	df000604 	addi	fp,sp,24
   414a0:	e13ffe15 	stw	r4,-8(fp)
   414a4:	e17fff15 	stw	r5,-4(fp)
   414a8:	e0bfff17 	ldw	r2,-4(fp)
   414ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   414b0:	0005303a 	rdctl	r2,status
   414b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   414b8:	e0fffb17 	ldw	r3,-20(fp)
   414bc:	00bfff84 	movi	r2,-2
   414c0:	1884703a 	and	r2,r3,r2
   414c4:	1001703a 	wrctl	status,r2
  
  return context;
   414c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   414cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   414d0:	00c00044 	movi	r3,1
   414d4:	e0bffa17 	ldw	r2,-24(fp)
   414d8:	1884983a 	sll	r2,r3,r2
   414dc:	0084303a 	nor	r2,zero,r2
   414e0:	1007883a 	mov	r3,r2
   414e4:	00800234 	movhi	r2,8
   414e8:	1085a204 	addi	r2,r2,5768
   414ec:	10800017 	ldw	r2,0(r2)
   414f0:	1886703a 	and	r3,r3,r2
   414f4:	00800234 	movhi	r2,8
   414f8:	1085a204 	addi	r2,r2,5768
   414fc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   41500:	00800234 	movhi	r2,8
   41504:	1085a204 	addi	r2,r2,5768
   41508:	10800017 	ldw	r2,0(r2)
   4150c:	100170fa 	wrctl	ienable,r2
   41510:	e0bffc17 	ldw	r2,-16(fp)
   41514:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41518:	e0bffd17 	ldw	r2,-12(fp)
   4151c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   41520:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   41524:	0001883a 	nop
}
   41528:	e037883a 	mov	sp,fp
   4152c:	df000017 	ldw	fp,0(sp)
   41530:	dec00104 	addi	sp,sp,4
   41534:	f800283a 	ret

00041538 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   41538:	defffc04 	addi	sp,sp,-16
   4153c:	df000315 	stw	fp,12(sp)
   41540:	df000304 	addi	fp,sp,12
   41544:	e13ffe15 	stw	r4,-8(fp)
   41548:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4154c:	000530fa 	rdctl	r2,ienable
   41550:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   41554:	00c00044 	movi	r3,1
   41558:	e0bfff17 	ldw	r2,-4(fp)
   4155c:	1884983a 	sll	r2,r3,r2
   41560:	1007883a 	mov	r3,r2
   41564:	e0bffd17 	ldw	r2,-12(fp)
   41568:	1884703a 	and	r2,r3,r2
   4156c:	1004c03a 	cmpne	r2,r2,zero
   41570:	10803fcc 	andi	r2,r2,255
}
   41574:	e037883a 	mov	sp,fp
   41578:	df000017 	ldw	fp,0(sp)
   4157c:	dec00104 	addi	sp,sp,4
   41580:	f800283a 	ret

00041584 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   41584:	defff504 	addi	sp,sp,-44
   41588:	dfc00a15 	stw	ra,40(sp)
   4158c:	df000915 	stw	fp,36(sp)
   41590:	df000904 	addi	fp,sp,36
   41594:	e13ffc15 	stw	r4,-16(fp)
   41598:	e17ffd15 	stw	r5,-12(fp)
   4159c:	e1bffe15 	stw	r6,-8(fp)
   415a0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   415a4:	00bffa84 	movi	r2,-22
   415a8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   415ac:	e0bffd17 	ldw	r2,-12(fp)
   415b0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   415b4:	e0bff817 	ldw	r2,-32(fp)
   415b8:	10800808 	cmpgei	r2,r2,32
   415bc:	1000271e 	bne	r2,zero,4165c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   415c0:	0005303a 	rdctl	r2,status
   415c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   415c8:	e0fffb17 	ldw	r3,-20(fp)
   415cc:	00bfff84 	movi	r2,-2
   415d0:	1884703a 	and	r2,r3,r2
   415d4:	1001703a 	wrctl	status,r2
  
  return context;
   415d8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   415dc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   415e0:	00800234 	movhi	r2,8
   415e4:	1085a704 	addi	r2,r2,5788
   415e8:	e0fff817 	ldw	r3,-32(fp)
   415ec:	180690fa 	slli	r3,r3,3
   415f0:	10c5883a 	add	r2,r2,r3
   415f4:	e0fffe17 	ldw	r3,-8(fp)
   415f8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   415fc:	00800234 	movhi	r2,8
   41600:	1085a704 	addi	r2,r2,5788
   41604:	e0fff817 	ldw	r3,-32(fp)
   41608:	180690fa 	slli	r3,r3,3
   4160c:	10c5883a 	add	r2,r2,r3
   41610:	10800104 	addi	r2,r2,4
   41614:	e0ffff17 	ldw	r3,-4(fp)
   41618:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4161c:	e0bffe17 	ldw	r2,-8(fp)
   41620:	10000526 	beq	r2,zero,41638 <alt_iic_isr_register+0xb4>
   41624:	e0bff817 	ldw	r2,-32(fp)
   41628:	100b883a 	mov	r5,r2
   4162c:	e13ffc17 	ldw	r4,-16(fp)
   41630:	00413f40 	call	413f4 <alt_ic_irq_enable>
   41634:	00000406 	br	41648 <alt_iic_isr_register+0xc4>
   41638:	e0bff817 	ldw	r2,-32(fp)
   4163c:	100b883a 	mov	r5,r2
   41640:	e13ffc17 	ldw	r4,-16(fp)
   41644:	00414940 	call	41494 <alt_ic_irq_disable>
   41648:	e0bff715 	stw	r2,-36(fp)
   4164c:	e0bffa17 	ldw	r2,-24(fp)
   41650:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41654:	e0bff917 	ldw	r2,-28(fp)
   41658:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   4165c:	e0bff717 	ldw	r2,-36(fp)
}
   41660:	e037883a 	mov	sp,fp
   41664:	dfc00117 	ldw	ra,4(sp)
   41668:	df000017 	ldw	fp,0(sp)
   4166c:	dec00204 	addi	sp,sp,8
   41670:	f800283a 	ret

00041674 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   41674:	defffc04 	addi	sp,sp,-16
   41678:	dfc00315 	stw	ra,12(sp)
   4167c:	df000215 	stw	fp,8(sp)
   41680:	dc000115 	stw	r16,4(sp)
   41684:	df000204 	addi	fp,sp,8
   41688:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   4168c:	e0bffe17 	ldw	r2,-8(fp)
   41690:	108000d0 	cmplti	r2,r2,3
   41694:	1000111e 	bne	r2,zero,416dc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   41698:	04000234 	movhi	r16,8
   4169c:	84042b04 	addi	r16,r16,4268
   416a0:	e0bffe17 	ldw	r2,-8(fp)
   416a4:	01400304 	movi	r5,12
   416a8:	1009883a 	mov	r4,r2
   416ac:	0041d880 	call	41d88 <__mulsi3>
   416b0:	8085883a 	add	r2,r16,r2
   416b4:	10800204 	addi	r2,r2,8
   416b8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   416bc:	04000234 	movhi	r16,8
   416c0:	84042b04 	addi	r16,r16,4268
   416c4:	e0bffe17 	ldw	r2,-8(fp)
   416c8:	01400304 	movi	r5,12
   416cc:	1009883a 	mov	r4,r2
   416d0:	0041d880 	call	41d88 <__mulsi3>
   416d4:	8085883a 	add	r2,r16,r2
   416d8:	10000015 	stw	zero,0(r2)
  }
}
   416dc:	0001883a 	nop
   416e0:	e6ffff04 	addi	sp,fp,-4
   416e4:	dfc00217 	ldw	ra,8(sp)
   416e8:	df000117 	ldw	fp,4(sp)
   416ec:	dc000017 	ldw	r16,0(sp)
   416f0:	dec00304 	addi	sp,sp,12
   416f4:	f800283a 	ret

000416f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   416f8:	defffa04 	addi	sp,sp,-24
   416fc:	df000515 	stw	fp,20(sp)
   41700:	df000504 	addi	fp,sp,20
   41704:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41708:	0005303a 	rdctl	r2,status
   4170c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41710:	e0fffc17 	ldw	r3,-16(fp)
   41714:	00bfff84 	movi	r2,-2
   41718:	1884703a 	and	r2,r3,r2
   4171c:	1001703a 	wrctl	status,r2
  
  return context;
   41720:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   41724:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   41728:	e0bfff17 	ldw	r2,-4(fp)
   4172c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   41730:	e0bffd17 	ldw	r2,-12(fp)
   41734:	10800017 	ldw	r2,0(r2)
   41738:	e0fffd17 	ldw	r3,-12(fp)
   4173c:	18c00117 	ldw	r3,4(r3)
   41740:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   41744:	e0bffd17 	ldw	r2,-12(fp)
   41748:	10800117 	ldw	r2,4(r2)
   4174c:	e0fffd17 	ldw	r3,-12(fp)
   41750:	18c00017 	ldw	r3,0(r3)
   41754:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   41758:	e0bffd17 	ldw	r2,-12(fp)
   4175c:	e0fffd17 	ldw	r3,-12(fp)
   41760:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   41764:	e0bffd17 	ldw	r2,-12(fp)
   41768:	e0fffd17 	ldw	r3,-12(fp)
   4176c:	10c00015 	stw	r3,0(r2)
   41770:	e0bffb17 	ldw	r2,-20(fp)
   41774:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41778:	e0bffe17 	ldw	r2,-8(fp)
   4177c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   41780:	0001883a 	nop
   41784:	e037883a 	mov	sp,fp
   41788:	df000017 	ldw	fp,0(sp)
   4178c:	dec00104 	addi	sp,sp,4
   41790:	f800283a 	ret

00041794 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   41794:	defffb04 	addi	sp,sp,-20
   41798:	dfc00415 	stw	ra,16(sp)
   4179c:	df000315 	stw	fp,12(sp)
   417a0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   417a4:	d0a00717 	ldw	r2,-32740(gp)
   417a8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   417ac:	d0a01017 	ldw	r2,-32704(gp)
   417b0:	10800044 	addi	r2,r2,1
   417b4:	d0a01015 	stw	r2,-32704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   417b8:	00002e06 	br	41874 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   417bc:	e0bffd17 	ldw	r2,-12(fp)
   417c0:	10800017 	ldw	r2,0(r2)
   417c4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   417c8:	e0bffd17 	ldw	r2,-12(fp)
   417cc:	10800403 	ldbu	r2,16(r2)
   417d0:	10803fcc 	andi	r2,r2,255
   417d4:	10000426 	beq	r2,zero,417e8 <alt_tick+0x54>
   417d8:	d0a01017 	ldw	r2,-32704(gp)
   417dc:	1000021e 	bne	r2,zero,417e8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   417e0:	e0bffd17 	ldw	r2,-12(fp)
   417e4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   417e8:	e0bffd17 	ldw	r2,-12(fp)
   417ec:	10800217 	ldw	r2,8(r2)
   417f0:	d0e01017 	ldw	r3,-32704(gp)
   417f4:	18801d36 	bltu	r3,r2,4186c <alt_tick+0xd8>
   417f8:	e0bffd17 	ldw	r2,-12(fp)
   417fc:	10800403 	ldbu	r2,16(r2)
   41800:	10803fcc 	andi	r2,r2,255
   41804:	1000191e 	bne	r2,zero,4186c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   41808:	e0bffd17 	ldw	r2,-12(fp)
   4180c:	10800317 	ldw	r2,12(r2)
   41810:	e0fffd17 	ldw	r3,-12(fp)
   41814:	18c00517 	ldw	r3,20(r3)
   41818:	1809883a 	mov	r4,r3
   4181c:	103ee83a 	callr	r2
   41820:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   41824:	e0bfff17 	ldw	r2,-4(fp)
   41828:	1000031e 	bne	r2,zero,41838 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   4182c:	e13ffd17 	ldw	r4,-12(fp)
   41830:	00416f80 	call	416f8 <alt_alarm_stop>
   41834:	00000d06 	br	4186c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   41838:	e0bffd17 	ldw	r2,-12(fp)
   4183c:	10c00217 	ldw	r3,8(r2)
   41840:	e0bfff17 	ldw	r2,-4(fp)
   41844:	1887883a 	add	r3,r3,r2
   41848:	e0bffd17 	ldw	r2,-12(fp)
   4184c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   41850:	e0bffd17 	ldw	r2,-12(fp)
   41854:	10c00217 	ldw	r3,8(r2)
   41858:	d0a01017 	ldw	r2,-32704(gp)
   4185c:	1880032e 	bgeu	r3,r2,4186c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   41860:	e0bffd17 	ldw	r2,-12(fp)
   41864:	00c00044 	movi	r3,1
   41868:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   4186c:	e0bffe17 	ldw	r2,-8(fp)
   41870:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   41874:	e0fffd17 	ldw	r3,-12(fp)
   41878:	d0a00704 	addi	r2,gp,-32740
   4187c:	18bfcf1e 	bne	r3,r2,417bc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   41880:	0001883a 	nop
}
   41884:	0001883a 	nop
   41888:	e037883a 	mov	sp,fp
   4188c:	dfc00117 	ldw	ra,4(sp)
   41890:	df000017 	ldw	fp,0(sp)
   41894:	dec00204 	addi	sp,sp,8
   41898:	f800283a 	ret

0004189c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   4189c:	deffff04 	addi	sp,sp,-4
   418a0:	df000015 	stw	fp,0(sp)
   418a4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   418a8:	000170fa 	wrctl	ienable,zero
}
   418ac:	0001883a 	nop
   418b0:	e037883a 	mov	sp,fp
   418b4:	df000017 	ldw	fp,0(sp)
   418b8:	dec00104 	addi	sp,sp,4
   418bc:	f800283a 	ret

000418c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   418c0:	defffe04 	addi	sp,sp,-8
   418c4:	df000115 	stw	fp,4(sp)
   418c8:	df000104 	addi	fp,sp,4
   418cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   418d0:	e0bfff17 	ldw	r2,-4(fp)
   418d4:	10bffe84 	addi	r2,r2,-6
   418d8:	10c00428 	cmpgeui	r3,r2,16
   418dc:	18001a1e 	bne	r3,zero,41948 <alt_exception_cause_generated_bad_addr+0x88>
   418e0:	100690ba 	slli	r3,r2,2
   418e4:	00800134 	movhi	r2,4
   418e8:	10863e04 	addi	r2,r2,6392
   418ec:	1885883a 	add	r2,r3,r2
   418f0:	10800017 	ldw	r2,0(r2)
   418f4:	1000683a 	jmp	r2
   418f8:	00041938 	rdprs	zero,zero,4196
   418fc:	00041938 	rdprs	zero,zero,4196
   41900:	00041948 	cmpgei	zero,zero,4197
   41904:	00041948 	cmpgei	zero,zero,4197
   41908:	00041948 	cmpgei	zero,zero,4197
   4190c:	00041938 	rdprs	zero,zero,4196
   41910:	00041940 	call	4194 <__alt_mem_rom-0x3be6c>
   41914:	00041948 	cmpgei	zero,zero,4197
   41918:	00041938 	rdprs	zero,zero,4196
   4191c:	00041938 	rdprs	zero,zero,4196
   41920:	00041948 	cmpgei	zero,zero,4197
   41924:	00041938 	rdprs	zero,zero,4196
   41928:	00041940 	call	4194 <__alt_mem_rom-0x3be6c>
   4192c:	00041948 	cmpgei	zero,zero,4197
   41930:	00041948 	cmpgei	zero,zero,4197
   41934:	00041938 	rdprs	zero,zero,4196
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   41938:	00800044 	movi	r2,1
   4193c:	00000306 	br	4194c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   41940:	0005883a 	mov	r2,zero
   41944:	00000106 	br	4194c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   41948:	0005883a 	mov	r2,zero
  }
}
   4194c:	e037883a 	mov	sp,fp
   41950:	df000017 	ldw	fp,0(sp)
   41954:	dec00104 	addi	sp,sp,4
   41958:	f800283a 	ret

0004195c <atexit>:
   4195c:	200b883a 	mov	r5,r4
   41960:	000f883a 	mov	r7,zero
   41964:	000d883a 	mov	r6,zero
   41968:	0009883a 	mov	r4,zero
   4196c:	0041af01 	jmpi	41af0 <__register_exitproc>

00041970 <exit>:
   41970:	defffe04 	addi	sp,sp,-8
   41974:	000b883a 	mov	r5,zero
   41978:	dc000015 	stw	r16,0(sp)
   4197c:	dfc00115 	stw	ra,4(sp)
   41980:	2021883a 	mov	r16,r4
   41984:	0041c080 	call	41c08 <__call_exitprocs>
   41988:	00800234 	movhi	r2,8
   4198c:	10859d04 	addi	r2,r2,5748
   41990:	11000017 	ldw	r4,0(r2)
   41994:	20800f17 	ldw	r2,60(r4)
   41998:	10000126 	beq	r2,zero,419a0 <exit+0x30>
   4199c:	103ee83a 	callr	r2
   419a0:	8009883a 	mov	r4,r16
   419a4:	0041db00 	call	41db0 <_exit>

000419a8 <memcpy>:
   419a8:	defffd04 	addi	sp,sp,-12
   419ac:	dfc00215 	stw	ra,8(sp)
   419b0:	dc400115 	stw	r17,4(sp)
   419b4:	dc000015 	stw	r16,0(sp)
   419b8:	00c003c4 	movi	r3,15
   419bc:	2005883a 	mov	r2,r4
   419c0:	1980452e 	bgeu	r3,r6,41ad8 <memcpy+0x130>
   419c4:	2906b03a 	or	r3,r5,r4
   419c8:	18c000cc 	andi	r3,r3,3
   419cc:	1800441e 	bne	r3,zero,41ae0 <memcpy+0x138>
   419d0:	347ffc04 	addi	r17,r6,-16
   419d4:	8822d13a 	srli	r17,r17,4
   419d8:	28c00104 	addi	r3,r5,4
   419dc:	23400104 	addi	r13,r4,4
   419e0:	8820913a 	slli	r16,r17,4
   419e4:	2b000204 	addi	r12,r5,8
   419e8:	22c00204 	addi	r11,r4,8
   419ec:	84000504 	addi	r16,r16,20
   419f0:	2a800304 	addi	r10,r5,12
   419f4:	22400304 	addi	r9,r4,12
   419f8:	2c21883a 	add	r16,r5,r16
   419fc:	2811883a 	mov	r8,r5
   41a00:	200f883a 	mov	r7,r4
   41a04:	41000017 	ldw	r4,0(r8)
   41a08:	1fc00017 	ldw	ra,0(r3)
   41a0c:	63c00017 	ldw	r15,0(r12)
   41a10:	39000015 	stw	r4,0(r7)
   41a14:	53800017 	ldw	r14,0(r10)
   41a18:	6fc00015 	stw	ra,0(r13)
   41a1c:	5bc00015 	stw	r15,0(r11)
   41a20:	4b800015 	stw	r14,0(r9)
   41a24:	18c00404 	addi	r3,r3,16
   41a28:	39c00404 	addi	r7,r7,16
   41a2c:	42000404 	addi	r8,r8,16
   41a30:	6b400404 	addi	r13,r13,16
   41a34:	63000404 	addi	r12,r12,16
   41a38:	5ac00404 	addi	r11,r11,16
   41a3c:	52800404 	addi	r10,r10,16
   41a40:	4a400404 	addi	r9,r9,16
   41a44:	1c3fef1e 	bne	r3,r16,41a04 <memcpy+0x5c>
   41a48:	89c00044 	addi	r7,r17,1
   41a4c:	380e913a 	slli	r7,r7,4
   41a50:	310003cc 	andi	r4,r6,15
   41a54:	02c000c4 	movi	r11,3
   41a58:	11c7883a 	add	r3,r2,r7
   41a5c:	29cb883a 	add	r5,r5,r7
   41a60:	5900212e 	bgeu	r11,r4,41ae8 <memcpy+0x140>
   41a64:	1813883a 	mov	r9,r3
   41a68:	2811883a 	mov	r8,r5
   41a6c:	200f883a 	mov	r7,r4
   41a70:	42800017 	ldw	r10,0(r8)
   41a74:	4a400104 	addi	r9,r9,4
   41a78:	39ffff04 	addi	r7,r7,-4
   41a7c:	4abfff15 	stw	r10,-4(r9)
   41a80:	42000104 	addi	r8,r8,4
   41a84:	59fffa36 	bltu	r11,r7,41a70 <memcpy+0xc8>
   41a88:	213fff04 	addi	r4,r4,-4
   41a8c:	2008d0ba 	srli	r4,r4,2
   41a90:	318000cc 	andi	r6,r6,3
   41a94:	21000044 	addi	r4,r4,1
   41a98:	2109883a 	add	r4,r4,r4
   41a9c:	2109883a 	add	r4,r4,r4
   41aa0:	1907883a 	add	r3,r3,r4
   41aa4:	290b883a 	add	r5,r5,r4
   41aa8:	30000626 	beq	r6,zero,41ac4 <memcpy+0x11c>
   41aac:	198d883a 	add	r6,r3,r6
   41ab0:	29c00003 	ldbu	r7,0(r5)
   41ab4:	18c00044 	addi	r3,r3,1
   41ab8:	29400044 	addi	r5,r5,1
   41abc:	19ffffc5 	stb	r7,-1(r3)
   41ac0:	19bffb1e 	bne	r3,r6,41ab0 <memcpy+0x108>
   41ac4:	dfc00217 	ldw	ra,8(sp)
   41ac8:	dc400117 	ldw	r17,4(sp)
   41acc:	dc000017 	ldw	r16,0(sp)
   41ad0:	dec00304 	addi	sp,sp,12
   41ad4:	f800283a 	ret
   41ad8:	2007883a 	mov	r3,r4
   41adc:	003ff206 	br	41aa8 <memcpy+0x100>
   41ae0:	2007883a 	mov	r3,r4
   41ae4:	003ff106 	br	41aac <memcpy+0x104>
   41ae8:	200d883a 	mov	r6,r4
   41aec:	003fee06 	br	41aa8 <memcpy+0x100>

00041af0 <__register_exitproc>:
   41af0:	defffa04 	addi	sp,sp,-24
   41af4:	dc000315 	stw	r16,12(sp)
   41af8:	04000234 	movhi	r16,8
   41afc:	84059d04 	addi	r16,r16,5748
   41b00:	80c00017 	ldw	r3,0(r16)
   41b04:	dc400415 	stw	r17,16(sp)
   41b08:	dfc00515 	stw	ra,20(sp)
   41b0c:	18805217 	ldw	r2,328(r3)
   41b10:	2023883a 	mov	r17,r4
   41b14:	10003726 	beq	r2,zero,41bf4 <__register_exitproc+0x104>
   41b18:	10c00117 	ldw	r3,4(r2)
   41b1c:	010007c4 	movi	r4,31
   41b20:	20c00e16 	blt	r4,r3,41b5c <__register_exitproc+0x6c>
   41b24:	1a000044 	addi	r8,r3,1
   41b28:	8800221e 	bne	r17,zero,41bb4 <__register_exitproc+0xc4>
   41b2c:	18c00084 	addi	r3,r3,2
   41b30:	18c7883a 	add	r3,r3,r3
   41b34:	18c7883a 	add	r3,r3,r3
   41b38:	12000115 	stw	r8,4(r2)
   41b3c:	10c7883a 	add	r3,r2,r3
   41b40:	19400015 	stw	r5,0(r3)
   41b44:	0005883a 	mov	r2,zero
   41b48:	dfc00517 	ldw	ra,20(sp)
   41b4c:	dc400417 	ldw	r17,16(sp)
   41b50:	dc000317 	ldw	r16,12(sp)
   41b54:	dec00604 	addi	sp,sp,24
   41b58:	f800283a 	ret
   41b5c:	00800034 	movhi	r2,0
   41b60:	10800004 	addi	r2,r2,0
   41b64:	10002626 	beq	r2,zero,41c00 <__register_exitproc+0x110>
   41b68:	01006404 	movi	r4,400
   41b6c:	d9400015 	stw	r5,0(sp)
   41b70:	d9800115 	stw	r6,4(sp)
   41b74:	d9c00215 	stw	r7,8(sp)
   41b78:	00000000 	call	0 <__alt_mem_rom-0x40000>
   41b7c:	d9400017 	ldw	r5,0(sp)
   41b80:	d9800117 	ldw	r6,4(sp)
   41b84:	d9c00217 	ldw	r7,8(sp)
   41b88:	10001d26 	beq	r2,zero,41c00 <__register_exitproc+0x110>
   41b8c:	81000017 	ldw	r4,0(r16)
   41b90:	10000115 	stw	zero,4(r2)
   41b94:	02000044 	movi	r8,1
   41b98:	22405217 	ldw	r9,328(r4)
   41b9c:	0007883a 	mov	r3,zero
   41ba0:	12400015 	stw	r9,0(r2)
   41ba4:	20805215 	stw	r2,328(r4)
   41ba8:	10006215 	stw	zero,392(r2)
   41bac:	10006315 	stw	zero,396(r2)
   41bb0:	883fde26 	beq	r17,zero,41b2c <__register_exitproc+0x3c>
   41bb4:	18c9883a 	add	r4,r3,r3
   41bb8:	2109883a 	add	r4,r4,r4
   41bbc:	1109883a 	add	r4,r2,r4
   41bc0:	21802215 	stw	r6,136(r4)
   41bc4:	01800044 	movi	r6,1
   41bc8:	12406217 	ldw	r9,392(r2)
   41bcc:	30cc983a 	sll	r6,r6,r3
   41bd0:	4992b03a 	or	r9,r9,r6
   41bd4:	12406215 	stw	r9,392(r2)
   41bd8:	21c04215 	stw	r7,264(r4)
   41bdc:	01000084 	movi	r4,2
   41be0:	893fd21e 	bne	r17,r4,41b2c <__register_exitproc+0x3c>
   41be4:	11006317 	ldw	r4,396(r2)
   41be8:	218cb03a 	or	r6,r4,r6
   41bec:	11806315 	stw	r6,396(r2)
   41bf0:	003fce06 	br	41b2c <__register_exitproc+0x3c>
   41bf4:	18805304 	addi	r2,r3,332
   41bf8:	18805215 	stw	r2,328(r3)
   41bfc:	003fc606 	br	41b18 <__register_exitproc+0x28>
   41c00:	00bfffc4 	movi	r2,-1
   41c04:	003fd006 	br	41b48 <__register_exitproc+0x58>

00041c08 <__call_exitprocs>:
   41c08:	defff504 	addi	sp,sp,-44
   41c0c:	df000915 	stw	fp,36(sp)
   41c10:	dd400615 	stw	r21,24(sp)
   41c14:	dc800315 	stw	r18,12(sp)
   41c18:	dfc00a15 	stw	ra,40(sp)
   41c1c:	ddc00815 	stw	r23,32(sp)
   41c20:	dd800715 	stw	r22,28(sp)
   41c24:	dd000515 	stw	r20,20(sp)
   41c28:	dcc00415 	stw	r19,16(sp)
   41c2c:	dc400215 	stw	r17,8(sp)
   41c30:	dc000115 	stw	r16,4(sp)
   41c34:	d9000015 	stw	r4,0(sp)
   41c38:	2839883a 	mov	fp,r5
   41c3c:	04800044 	movi	r18,1
   41c40:	057fffc4 	movi	r21,-1
   41c44:	00800234 	movhi	r2,8
   41c48:	10859d04 	addi	r2,r2,5748
   41c4c:	12000017 	ldw	r8,0(r2)
   41c50:	45005217 	ldw	r20,328(r8)
   41c54:	44c05204 	addi	r19,r8,328
   41c58:	a0001c26 	beq	r20,zero,41ccc <__call_exitprocs+0xc4>
   41c5c:	a0800117 	ldw	r2,4(r20)
   41c60:	15ffffc4 	addi	r23,r2,-1
   41c64:	b8000d16 	blt	r23,zero,41c9c <__call_exitprocs+0x94>
   41c68:	14000044 	addi	r16,r2,1
   41c6c:	8421883a 	add	r16,r16,r16
   41c70:	8421883a 	add	r16,r16,r16
   41c74:	84402004 	addi	r17,r16,128
   41c78:	a463883a 	add	r17,r20,r17
   41c7c:	a421883a 	add	r16,r20,r16
   41c80:	e0001e26 	beq	fp,zero,41cfc <__call_exitprocs+0xf4>
   41c84:	80804017 	ldw	r2,256(r16)
   41c88:	e0801c26 	beq	fp,r2,41cfc <__call_exitprocs+0xf4>
   41c8c:	bdffffc4 	addi	r23,r23,-1
   41c90:	843fff04 	addi	r16,r16,-4
   41c94:	8c7fff04 	addi	r17,r17,-4
   41c98:	bd7ff91e 	bne	r23,r21,41c80 <__call_exitprocs+0x78>
   41c9c:	00800034 	movhi	r2,0
   41ca0:	10800004 	addi	r2,r2,0
   41ca4:	10000926 	beq	r2,zero,41ccc <__call_exitprocs+0xc4>
   41ca8:	a0800117 	ldw	r2,4(r20)
   41cac:	1000301e 	bne	r2,zero,41d70 <__call_exitprocs+0x168>
   41cb0:	a0800017 	ldw	r2,0(r20)
   41cb4:	10003226 	beq	r2,zero,41d80 <__call_exitprocs+0x178>
   41cb8:	a009883a 	mov	r4,r20
   41cbc:	98800015 	stw	r2,0(r19)
   41cc0:	00000000 	call	0 <__alt_mem_rom-0x40000>
   41cc4:	9d000017 	ldw	r20,0(r19)
   41cc8:	a03fe41e 	bne	r20,zero,41c5c <__call_exitprocs+0x54>
   41ccc:	dfc00a17 	ldw	ra,40(sp)
   41cd0:	df000917 	ldw	fp,36(sp)
   41cd4:	ddc00817 	ldw	r23,32(sp)
   41cd8:	dd800717 	ldw	r22,28(sp)
   41cdc:	dd400617 	ldw	r21,24(sp)
   41ce0:	dd000517 	ldw	r20,20(sp)
   41ce4:	dcc00417 	ldw	r19,16(sp)
   41ce8:	dc800317 	ldw	r18,12(sp)
   41cec:	dc400217 	ldw	r17,8(sp)
   41cf0:	dc000117 	ldw	r16,4(sp)
   41cf4:	dec00b04 	addi	sp,sp,44
   41cf8:	f800283a 	ret
   41cfc:	a0800117 	ldw	r2,4(r20)
   41d00:	80c00017 	ldw	r3,0(r16)
   41d04:	10bfffc4 	addi	r2,r2,-1
   41d08:	15c01426 	beq	r2,r23,41d5c <__call_exitprocs+0x154>
   41d0c:	80000015 	stw	zero,0(r16)
   41d10:	183fde26 	beq	r3,zero,41c8c <__call_exitprocs+0x84>
   41d14:	95c8983a 	sll	r4,r18,r23
   41d18:	a0806217 	ldw	r2,392(r20)
   41d1c:	a5800117 	ldw	r22,4(r20)
   41d20:	2084703a 	and	r2,r4,r2
   41d24:	10000b26 	beq	r2,zero,41d54 <__call_exitprocs+0x14c>
   41d28:	a0806317 	ldw	r2,396(r20)
   41d2c:	2088703a 	and	r4,r4,r2
   41d30:	20000c1e 	bne	r4,zero,41d64 <__call_exitprocs+0x15c>
   41d34:	89400017 	ldw	r5,0(r17)
   41d38:	d9000017 	ldw	r4,0(sp)
   41d3c:	183ee83a 	callr	r3
   41d40:	a0800117 	ldw	r2,4(r20)
   41d44:	15bfbf1e 	bne	r2,r22,41c44 <__call_exitprocs+0x3c>
   41d48:	98800017 	ldw	r2,0(r19)
   41d4c:	153fcf26 	beq	r2,r20,41c8c <__call_exitprocs+0x84>
   41d50:	003fbc06 	br	41c44 <__call_exitprocs+0x3c>
   41d54:	183ee83a 	callr	r3
   41d58:	003ff906 	br	41d40 <__call_exitprocs+0x138>
   41d5c:	a5c00115 	stw	r23,4(r20)
   41d60:	003feb06 	br	41d10 <__call_exitprocs+0x108>
   41d64:	89000017 	ldw	r4,0(r17)
   41d68:	183ee83a 	callr	r3
   41d6c:	003ff406 	br	41d40 <__call_exitprocs+0x138>
   41d70:	a0800017 	ldw	r2,0(r20)
   41d74:	a027883a 	mov	r19,r20
   41d78:	1029883a 	mov	r20,r2
   41d7c:	003fb606 	br	41c58 <__call_exitprocs+0x50>
   41d80:	0005883a 	mov	r2,zero
   41d84:	003ffb06 	br	41d74 <__call_exitprocs+0x16c>

00041d88 <__mulsi3>:
   41d88:	0005883a 	mov	r2,zero
   41d8c:	20000726 	beq	r4,zero,41dac <__mulsi3+0x24>
   41d90:	20c0004c 	andi	r3,r4,1
   41d94:	2008d07a 	srli	r4,r4,1
   41d98:	18000126 	beq	r3,zero,41da0 <__mulsi3+0x18>
   41d9c:	1145883a 	add	r2,r2,r5
   41da0:	294b883a 	add	r5,r5,r5
   41da4:	203ffa1e 	bne	r4,zero,41d90 <__mulsi3+0x8>
   41da8:	f800283a 	ret
   41dac:	f800283a 	ret

00041db0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   41db0:	defffd04 	addi	sp,sp,-12
   41db4:	df000215 	stw	fp,8(sp)
   41db8:	df000204 	addi	fp,sp,8
   41dbc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   41dc0:	0001883a 	nop
   41dc4:	e0bfff17 	ldw	r2,-4(fp)
   41dc8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   41dcc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   41dd0:	10000226 	beq	r2,zero,41ddc <_exit+0x2c>
    ALT_SIM_FAIL();
   41dd4:	002af070 	cmpltui	zero,zero,43969
   41dd8:	00000106 	br	41de0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   41ddc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   41de0:	003fff06 	br	41de0 <_exit+0x30>
